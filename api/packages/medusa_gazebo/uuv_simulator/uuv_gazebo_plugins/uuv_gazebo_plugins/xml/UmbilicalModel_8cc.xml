<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="UmbilicalModel_8cc" kind="file" language="C++">
    <compoundname>UmbilicalModel.cc</compoundname>
    <includes refid="UmbilicalModel_8hh" local="no">uuv_gazebo_plugins/UmbilicalModel.hh</includes>
    <incdepgraph>
      <node id="1">
        <label>src/UmbilicalModel.cc</label>
        <link refid="UmbilicalModel_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>uuv_gazebo_plugins/UmbilicalModel.hh</label>
        <link refid="UmbilicalModel_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="5">
        <label>gazebo/gazebo.hh</label>
      </node>
      <node id="6">
        <label>gazebo/common/UpdateInfo.hh</label>
      </node>
      <node id="9">
        <label>sdf/sdf.hh</label>
      </node>
      <node id="8">
        <label>gazebo/physics/Model.hh</label>
      </node>
      <node id="7">
        <label>gazebo/physics/Link.hh</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacegazebo">gazebo</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2016<sp/>The<sp/>UUV<sp/>Simulator<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="UmbilicalModel_8hh" kindref="compound">uuv_gazebo_plugins/UmbilicalModel.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gazebo<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1UmbilicalModel_1adbc3a2261e2f18bf139ebcd4bdad9a2e" kindref="member">UmbilicalModel::Init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__PRETTY_FUNCTION__<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">UmbilicalModel*<sp/><ref refid="classgazebo_1_1UmbilicalModelFactory_1ac7a7245f47500ee02e68f84c5e7a5032" kindref="member">UmbilicalModelFactory::CreateUmbilicalModel</ref>(sdf::ElementPtr<sp/>_sdf,<sp/>physics::ModelPtr<sp/>_model)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__PRETTY_FUNCTION__<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;umbilical_model<sp/>does<sp/>not<sp/>have<sp/>an<sp/>type<sp/>element&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::string<sp/>identifier<sp/>=<sp/>_sdf-&gt;Get&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(creators_.find(identifier)<sp/>==<sp/>creators_.end())<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>UmbilicalModel<sp/>with<sp/>unknown<sp/>identifier:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>identifier<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>creators_[identifier](_sdf,<sp/>_model);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">UmbilicalModelFactory&amp;<sp/><ref refid="classgazebo_1_1UmbilicalModelFactory_1aa6505cb366b7415a287c968307288c4d" kindref="member">UmbilicalModelFactory::GetInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>UmbilicalModelFactory<sp/>instance;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1UmbilicalModelFactory_1a97c20262e741c090c7616f082a23869e" kindref="member">UmbilicalModelFactory::RegisterCreator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_identifier,<sp/>UmbilicalModelCreator<sp/>_creator)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(creators_.find(_identifier)<sp/>!=<sp/>creators_.end())<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>Registering<sp/>UmbilicalModel<sp/>with<sp/>identifier:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_identifier<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>twice&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>creators_[_identifier]<sp/>=<sp/>_creator;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Registered<sp/>UmbilicalModel<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_identifier<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>UmbilicalModelBerg::IDENTIFIER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Berg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="UmbilicalModel_8hh_1a2bc2fd937d9ce2e10b1505d3154f3ed8" kindref="member">REGISTER_UMBILICALMODEL_CREATOR</ref>(UmbilicalModelBerg,<sp/>&amp;<ref refid="classgazebo_1_1UmbilicalModelBerg_1a4263ddcd8f8712ebf473ef5e88e623d4" kindref="member">UmbilicalModelBerg::create</ref>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classgazebo_1_1UmbilicalModelBerg_1a3f1ce2888fe8ef1fa0da035c97926b48" kindref="member">UmbilicalModelBerg::UmbilicalModelBerg</ref>(sdf::ElementPtr<sp/>_sdf,<sp/>physics::ModelPtr<sp/>_model)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>GZ_ASSERT(_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;connector_link&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>connector_link.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::string<sp/>connectorLinkName<sp/>=<sp/>_sdf-&gt;Get&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;connector_link&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classgazebo_1_1UmbilicalModel_1a83ea6576e2b766d962be574e576413bd" kindref="member">connector</ref><sp/>=<sp/>_model-&gt;GetLink(connectorLinkName);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>GZ_ASSERT(this-&gt;connector,<sp/></highlight><highlight class="stringliteral">&quot;connector_link<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>GZ_ASSERT(_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;diameter&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>diameter.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>this-&gt;diameter<sp/>=<sp/>_sdf-&gt;Get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;diameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>GZ_ASSERT(_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;water_density&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>water_density.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>this-&gt;rho<sp/>=<sp/>_sdf-&gt;Get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;water_density&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">UmbilicalModel*<sp/><ref refid="classgazebo_1_1UmbilicalModelBerg_1a4263ddcd8f8712ebf473ef5e88e623d4" kindref="member">UmbilicalModelBerg::create</ref>(sdf::ElementPtr<sp/>_sdf,<sp/>physics::ModelPtr<sp/>_model)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__PRETTY_FUNCTION__<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1UmbilicalModelBerg_1a3f1ce2888fe8ef1fa0da035c97926b48" kindref="member">UmbilicalModelBerg</ref>(_sdf,<sp/>_model);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1UmbilicalModelBerg_1a192a711adeb0f052eb0b07d67b4629f4" kindref="member">UmbilicalModelBerg::OnUpdate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>common::UpdateInfo<sp/>&amp;_info,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ignition::math::Vector3d&amp;<sp/>_flow)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ignition::math::Pose3d<sp/>pose;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>pose<sp/>=<sp/>this-&gt;connector-&gt;WorldPose();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>-pose.Pos().Z();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>some<sp/>wiggle<sp/>room<sp/>when<sp/>the<sp/>UUV<sp/>emerges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>GZ_ASSERT(h<sp/>&lt;<sp/>10.0,<sp/></highlight><highlight class="stringliteral">&quot;z<sp/>coordinate<sp/>should<sp/>be<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>ignition::math::Vector3d<sp/>uvR;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>uvR<sp/>=<sp/>_flow<sp/>-<sp/>this-&gt;connector-&gt;WorldLinearVel();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uR2<sp/>=<sp/>uvR.X()<sp/>*<sp/>std::abs(uvR.X());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vR2<sp/>=<sp/>uvR.Y()<sp/>*<sp/>std::abs(uvR.Y());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>0.25<sp/>*<sp/>1.2<sp/>*<sp/>this-&gt;rho;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>ignition::math::Vector3d<sp/>fWorld(uR2,<sp/>vR2,<sp/>0.);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>this-&gt;connector-&gt;AddForce(fWorld<sp/>*<sp/>factor);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/UmbilicalModel.cc"/>
  </compounddef>
</doxygen>
