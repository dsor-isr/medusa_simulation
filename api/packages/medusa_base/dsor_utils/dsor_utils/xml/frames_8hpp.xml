<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="frames_8hpp" kind="file" language="C++">
    <compoundname>frames.hpp</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes refid="rotations_8hpp" local="yes">rotations.hpp</includes>
    <includedby refid="spherical__coordinates_8cpp" local="yes">src/spherical_coordinates.cpp</includedby>
    <includedby refid="test__frames_8cpp" local="yes">test/test_frames.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>Eigen/Core</label>
      </node>
      <node id="1">
        <label>include/dsor_utils/frames.hpp</label>
        <link refid="frames_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rotations.hpp</label>
        <link refid="rotations_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Dense</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceDSOR">DSOR</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceDSOR_1aa122503266a9150ac8f3cf814489d170" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Quaternion&lt; T &gt;</type>
        <definition>const Eigen::Quaternion&lt;T&gt; DSOR::ENU_NED_INERTIAL_Q</definition>
        <argsstring></argsstring>
        <name>ENU_NED_INERTIAL_Q</name>
        <initializer>= euler_to_quaternion(Eigen::Matrix&lt;T, 3, 1&gt;(M_PI, 0.0, M_PI_2))</initializer>
        <briefdescription>
<para>Static quaternion to convert a rotation expressed in ENU to a rotation expressed in NED (Z-&gt;Y-&gt;X convention) on the inertial frame Rotate PI/2 about Z-axis -&gt; Rotate 0 about Y-axis -&gt; Rotate PI about X-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: this quaternion is as valid as the quaternion representing the rotation from NED to ENU (quaternion ambiguity) on the inertial frame </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="31" column="32" bodyfile="include/dsor_utils/frames.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceDSOR_1a96a7f395f44c4ad9531b4dbabac78aa5" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Quaternion&lt; T &gt;</type>
        <definition>const Eigen::Quaternion&lt;T&gt; DSOR::ENU_NED_BODY_Q</definition>
        <argsstring></argsstring>
        <name>ENU_NED_BODY_Q</name>
        <initializer>= euler_to_quaternion(Eigen::Matrix&lt;T, 3, 1&gt;(M_PI, 0.0, 0.0))</initializer>
        <briefdescription>
<para>Static quaternion to convert a rotation expressed in ENU body frame (ROS base_link) to a rotation expressed in NED body frame (Z-&gt;Y-&gt;X convention) Rotate 0 about Z-axis -&gt; Rotate 0 about Y-axis -&gt; Rotate PI about X-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: this quaternion is as valid as the quaternion representing the rotation from NED to ENU (quaternion ambiguity) on the body frame </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="42" column="32" bodyfile="include/dsor_utils/frames.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceDSOR_1a4e62353e2a0ca8ea23ec9725628d49e6" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Quaternion&lt; T &gt;</type>
        <definition>const Eigen::Quaternion&lt;T&gt; DSOR::BODY_ENU_NED_Q</definition>
        <argsstring></argsstring>
        <name>BODY_ENU_NED_Q</name>
        <initializer>= euler_to_quaternion(Eigen::Matrix&lt;T, 3, 1&gt;(M_PI, 0.0, 0.0))</initializer>
        <briefdescription>
<para>Static quaternion needed for rotating vectors in body frames between ENU and NED +PI rotation around X (Forward) axis transforms from Forward, Right, Down (body frame in NED) Fto Forward, Left, Up (body frame in ENU). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="50" column="32" bodyfile="include/dsor_utils/frames.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceDSOR_1a46de8bf6105c5130ca026f2e55956e8c" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Transform&lt; T, 3, Eigen::Affine &gt;</type>
        <definition>const Eigen::Transform&lt;T, 3, Eigen::Affine&gt; DSOR::BODY_ENU_NED_TF</definition>
        <argsstring></argsstring>
        <name>BODY_ENU_NED_TF</name>
        <initializer>= Eigen::Transform&lt;T, 3, Eigen::Affine&gt;(BODY_ENU_NED_Q&lt;T&gt;)</initializer>
        <briefdescription>
<para>Static affine matrix to roate vectors ENU (or NED) -&gt; NED (or ENU) expressed in body frame +PI rotation around X (Forward) axis transforms from Forward, Right, Down (body frame in NED) Fto Forward, Left, Up (body frame in ENU). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="58" column="31" bodyfile="include/dsor_utils/frames.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceDSOR_1a51f7ff8d336b1c25efa3ca81a932a4c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::PermutationMatrix&lt; 3 &gt;</type>
        <definition>static const Eigen::PermutationMatrix&lt;3&gt; DSOR::NED_ENU_REFLECTION_XY</definition>
        <argsstring>(Eigen::Vector3i(1, 0, 2))</argsstring>
        <name>NED_ENU_REFLECTION_XY</name>
        <param>
          <type>Eigen::Vector3i(1, 0, 2)</type>
        </param>
        <briefdescription>
<para>Use reflections instead of rotations for NED &lt;-&gt; ENU transformation to avoid NaN/Inf floating point pollution across different axes since in NED &lt;-&gt; ENU the axes are perfectly aligned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="68" column="39" declfile="include/dsor_utils/frames.hpp" declline="68" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a034dd0a8bd449363c65bebcb6562f5c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const Eigen::DiagonalMatrix&lt; T, 3 &gt;</type>
        <definition>static const Eigen::DiagonalMatrix&lt;T, 3&gt; DSOR::NED_ENU_REFLECTION_Z</definition>
        <argsstring>(1, 1, -1)</argsstring>
        <name>NED_ENU_REFLECTION_Z</name>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="70" column="36" declfile="include/dsor_utils/frames.hpp" declline="70" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a9ee41c331beace8a4d3cf2e54a4b634c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaternion&lt; T &gt;</type>
        <definition>Eigen::Quaternion&lt;T&gt; DSOR::rot_body_rotation</definition>
        <argsstring>(const Eigen::Quaternion&lt; T &gt; &amp;q)</argsstring>
        <name>rot_body_rotation</name>
        <param>
          <type>const Eigen::Quaternion&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Transform a rotation (as a quaternion) from body expressed in ENU (or NED) to inertial frame to a similar rotation (as quaternion) from body expressed in NED (or ENU) to inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Check <ulink url="http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/">http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/</ulink> for more details behind these type of transformations towards obtaining rotations in different frames of reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>quaternion representing a rotation: body frame ENU (or NED) -&gt; inertial frame (in arbitrary convention) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quaternion represeting a rotation: body frame NED (or ENU) -&gt; inertial frame (in arbitrary convention) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="85" column="26" bodyfile="include/dsor_utils/frames.hpp" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1ac137fae9964e195246618dc8e08c5b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaternion&lt; T &gt;</type>
        <definition>Eigen::Quaternion&lt;T&gt; DSOR::rot_inertial_rotation</definition>
        <argsstring>(const Eigen::Quaternion&lt; T &gt; &amp;q)</argsstring>
        <name>rot_inertial_rotation</name>
        <param>
          <type>const Eigen::Quaternion&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Transform a rotation (as a quaternion) from body to inertial frame expressed in ENU (or NED) to a similar rotation (as quaternion) from body to inertial frame expressed in NED (or ENU) </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Check <ulink url="http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/">http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/</ulink> for more details behind these type of transformations towards obtaining rotations in different frames of reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>quaternion representing a rotation: body frame (in arbitrary convention) -&gt; inertial frame ENU (or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quaternion represeting a rotation: body frame (in arbitrary convention) -&gt; inertial frame NED (or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="101" column="26" bodyfile="include/dsor_utils/frames.hpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a59b63be2850649301cf741ef0bdb8042" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Quaternion&lt; T &gt;</type>
        <definition>Eigen::Quaternion&lt;T&gt; DSOR::rot_body_to_inertial</definition>
        <argsstring>(const Eigen::Quaternion&lt; T &gt; &amp;q)</argsstring>
        <name>rot_body_to_inertial</name>
        <param>
          <type>const Eigen::Quaternion&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Transform a rotation of a rigid body (as a quaternion) from body (ENU or NED) to inertial frame (ENU or NED) to a similar rotation (as quaternion) from body (NED or ENU) to inertial frame (NED or ENU) </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: This function is usefull to convert the attitude of a vehicle from &quot;ROS&quot; quaternion to a typicall literature quaternion (where both the body frame and inertial frames are in ENU). If you are converting a quaternion that expresses the orientation of a sensor with respect to a rigid body&apos;s body frame (and not the inertial frame), then you DO NOT WANT TO USE THIS FUNCTION. Body-FRAME NED is not the same as INERTIAL-FRAME NED (this comes once again from the fact that in ned body the x-y axis don&apos;t switch like in inertial frame) as explained in the documentation.</para>
<para>Essencial only use this if you are representing a body in inertial frame!</para>
<para>NOTE: Check <ulink url="http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/">http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/</ulink> for more details behind these type of transformations towards obtaining rotations in different frames of reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>quaternion representing a rotation: body frame (ENU or NED) -&gt; inertial frame (ENU or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quaternion representing a rotation: body frame (NED or ENU) -&gt; inertial frame (NED or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="126" column="26" bodyfile="include/dsor_utils/frames.hpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a5c16e87bba9f4282e6dd29f7ba64e4eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, 3, 1&gt; DSOR::transform_vect_body_enu_ned</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;vec)</argsstring>
        <name>transform_vect_body_enu_ned</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transform vector in ENU (or NED) to NED (or ENU), expressed in body-frame. +PI rotation around X (Forward) axis transforms from Forward, Right, Down (body frame in NED) Fto Forward, Left, Up (body frame in ENU). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector expressed in body-frame (ENU or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector expressed in body-frame (NED or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="140" column="22" bodyfile="include/dsor_utils/frames.hpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a2ed6b8ba2f0d17ee455a90d9987a2389" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, 3, 1&gt; DSOR::transform_vect_between_arbitrary_ref</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;vec, const Eigen::Quaternion&lt; T &gt; &amp;q)</argsstring>
        <name>transform_vect_between_arbitrary_ref</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const Eigen::Quaternion&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Transform a vector in a given frame of reference to another frame of reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector expressed in the original frame of reference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion that expresses the orientation of the original frame of reference with respect to the final frame of reference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector expressed in the new frame of reference </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="152" column="22" bodyfile="include/dsor_utils/frames.hpp" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1afd9875e55e41f70cab660dec2475e982" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, 3, 1&gt; DSOR::transform_vect_inertial_enu_ned</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;vec)</argsstring>
        <name>transform_vect_inertial_enu_ned</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 1 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transform vector in ENU (or NED) to NED (or ENU), expressed in inertial-frame. ENU &lt;<mdash/>&gt; NED - Invert the Z axis and switch the XY axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector expressed in inertial-frame (ENU or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector expressed in inertial-frame (NED or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="167" column="22" bodyfile="include/dsor_utils/frames.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a75b855583612ca2ddcc0565e7d6f826b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;T, 3, 3&gt; DSOR::transform_cov3_body_enu_ned</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;cov_in)</argsstring>
        <name>transform_cov3_body_enu_ned</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;</type>
          <declname>cov_in</declname>
        </param>
        <briefdescription>
<para>Transform 3x3 covariance matrix in ENU (or NED) to NED (or ENU), expressed in body-frame. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Check <ulink url="https://robotics.stackexchange.com/questions/2556/how-to-rotate-covariance">https://robotics.stackexchange.com/questions/2556/how-to-rotate-covariance</ulink> for a detailed explanation of the actual conversion proof for covariance matrices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cov_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Covariance matrix expressed in body-frame (ENU or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Covariance matrix expressed in body-frame (NED or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="182" column="22" bodyfile="include/dsor_utils/frames.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDSOR_1a1fe1d20a64b477cc5ed243f2ea2e2bec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;T, 3, 3&gt; DSOR::transform_cov3_inertial_enu_ned</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;cov_in)</argsstring>
        <name>transform_cov3_inertial_enu_ned</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;</type>
          <declname>cov_in</declname>
        </param>
        <briefdescription>
<para>Transform 3x3 covariance matrix in ENU (or NED) to NED (or ENU), expressed in inertial-frame. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Check <ulink url="https://robotics.stackexchange.com/questions/2556/how-to-rotate-covariance">https://robotics.stackexchange.com/questions/2556/how-to-rotate-covariance</ulink> for a detailed explanation of the actual conversion proof for covariance matrices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cov_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Covariance matrix expressed in inertial-frame (ENU or NED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Covariance matrix expressed in inertial-frame (NED or ENU) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dsor_utils/frames.hpp" line="197" column="22" bodyfile="include/dsor_utils/frames.hpp" bodystart="197" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rotations.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceDSOR" kindref="compound">DSOR</ref>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>ENU_NED_INERTIAL_Q<sp/>=<sp/><ref refid="namespaceDSOR_1a5b164cbd4ad092423d0c96a04d689863" kindref="member">euler_to_quaternion</ref>(Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;(M_PI,<sp/>0.0,<sp/>M_PI_2));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>ENU_NED_BODY_Q<sp/>=<sp/><ref refid="namespaceDSOR_1a5b164cbd4ad092423d0c96a04d689863" kindref="member">euler_to_quaternion</ref>(Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;(M_PI,<sp/>0.0,<sp/>0.0));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>BODY_ENU_NED_Q<sp/>=<sp/><ref refid="namespaceDSOR_1a5b164cbd4ad092423d0c96a04d689863" kindref="member">euler_to_quaternion</ref>(Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;(M_PI,<sp/>0.0,<sp/>0.0));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Transform&lt;T,<sp/>3,<sp/>Eigen::Affine&gt;<sp/>BODY_ENU_NED_TF<sp/>=<sp/>Eigen::Transform&lt;T,<sp/>3,<sp/>Eigen::Affine&gt;(BODY_ENU_NED_Q&lt;T&gt;);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>const<sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/>BODY_ENU_NED_AXIS<sp/>=<sp/>BODY_ENU_NED_Q&lt;T&gt;.toRotationMatrix();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::PermutationMatrix&lt;3&gt;<sp/>NED_ENU_REFLECTION_XY(Eigen::Vector3i(1,<sp/>0,<sp/>2));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DiagonalMatrix&lt;T,<sp/>3&gt;<sp/>NED_ENU_REFLECTION_Z(1,<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85" refid="namespaceDSOR_1a9ee41c331beace8a4d3cf2e54a4b634c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/><ref refid="namespaceDSOR_1a9ee41c331beace8a4d3cf2e54a4b634c" kindref="member">rot_body_rotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q<sp/>*<sp/>ENU_NED_BODY_Q&lt;T&gt;;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="101" refid="namespaceDSOR_1ac137fae9964e195246618dc8e08c5b00" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/><ref refid="namespaceDSOR_1ac137fae9964e195246618dc8e08c5b00" kindref="member">rot_inertial_rotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ENU_NED_INERTIAL_Q&lt;T&gt;<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="126" refid="namespaceDSOR_1a59b63be2850649301cf741ef0bdb8042" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/><ref refid="namespaceDSOR_1a59b63be2850649301cf741ef0bdb8042" kindref="member">rot_body_to_inertial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceDSOR_1ac137fae9964e195246618dc8e08c5b00" kindref="member">rot_inertial_rotation</ref>(<ref refid="namespaceDSOR_1a9ee41c331beace8a4d3cf2e54a4b634c" kindref="member">rot_body_rotation</ref>(q));</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="140" refid="namespaceDSOR_1a5c16e87bba9f4282e6dd29f7ba64e4eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;<sp/><ref refid="namespaceDSOR_1a5c16e87bba9f4282e6dd29f7ba64e4eb" kindref="member">transform_vect_body_enu_ned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,3,1&gt;<sp/>&amp;vec)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BODY_ENU_NED_TF&lt;T&gt;<sp/>*<sp/>vec;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="152" refid="namespaceDSOR_1a2ed6b8ba2f0d17ee455a90d9987a2389" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;<sp/><ref refid="namespaceDSOR_1a2ed6b8ba2f0d17ee455a90d9987a2389" kindref="member">transform_vect_between_arbitrary_ref</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;<sp/>&amp;vec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;T&gt;<sp/>&amp;q)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>Affine3D<sp/>transform<sp/>with<sp/>the<sp/>rotation<sp/>between<sp/>the<sp/>reference<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Transform&lt;T,<sp/>3,<sp/>Eigen::Affine&gt;<sp/>frame_conversion<sp/>=<sp/>Eigen::Transform&lt;T,<sp/>3,<sp/>Eigen::Affine&gt;(q);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frame_conversion<sp/>*<sp/>vec;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="167" refid="namespaceDSOR_1afd9875e55e41f70cab660dec2475e982" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>1&gt;<sp/><ref refid="namespaceDSOR_1afd9875e55e41f70cab660dec2475e982" kindref="member">transform_vect_inertial_enu_ned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,3,1&gt;<sp/>&amp;vec)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NED_ENU_REFLECTION_XY<sp/>*<sp/>(NED_ENU_REFLECTION_Z&lt;T&gt;<sp/>*<sp/>vec);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="182" refid="namespaceDSOR_1a75b855583612ca2ddcc0565e7d6f826b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/><ref refid="namespaceDSOR_1a75b855583612ca2ddcc0565e7d6f826b" kindref="member">transform_cov3_body_enu_ned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/>&amp;cov_in)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov_in<sp/>*<sp/>BODY_ENU_NED_Q&lt;T&gt;;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="197" refid="namespaceDSOR_1a1fe1d20a64b477cc5ed243f2ea2e2bec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/><ref refid="namespaceDSOR_1a1fe1d20a64b477cc5ed243f2ea2e2bec" kindref="member">transform_cov3_inertial_enu_ned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/>&amp;cov_in)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;T,<sp/>3,<sp/>3&gt;<sp/>cov_out;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>cov_out<sp/>=<sp/>NED_ENU_REFLECTION_XY<sp/>*<sp/>(NED_ENU_REFLECTION_Z&lt;T&gt;<sp/>*<sp/>cov_in<sp/>*<sp/>NED_ENU_REFLECTION_Z&lt;T&gt;<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NED_ENU_REFLECTION_XY.transpose();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov_out;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/dsor_utils/frames.hpp"/>
  </compounddef>
</doxygen>
