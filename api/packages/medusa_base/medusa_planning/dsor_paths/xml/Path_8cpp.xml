<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Path_8cpp" kind="file" language="C++">
    <compoundname>Path.cpp</compoundname>
    <includes refid="Path_8h" local="yes">Path.h</includes>
    <includes local="no">ros/ros.h</includes>
    <incdepgraph>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="3">
        <label>PathSection.h</label>
        <link refid="PathSection_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Eigen/Core</label>
      </node>
      <node id="7">
        <label>Speed.h</label>
        <link refid="Speed_8h_source"/>
      </node>
      <node id="10">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="2">
        <label>Path.h</label>
        <link refid="Path_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="12">
        <label>ros/ros.h</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>src/algorithms/Path.cpp</label>
        <link refid="Path_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Path.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/ros.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>only<sp/>used<sp/>for<sp/>debug<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>constructor<sp/>assumes<sp/>a<sp/>simple<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classPath_1af26cfab021ddf49af73da3b2beca85ac" kindref="member">Path::Path</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="classPath_1a141da9ff89c85e0ba410b5a73864c267" kindref="member">Path::~Path</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>path<sp/>sections<sp/>inside<sp/>the<sp/>vector<sp/>of<sp/>sections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;PathSection*&gt;::iterator<sp/>i<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.begin();<sp/>i<sp/>!=<sp/>this-&gt;sections_.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>the<sp/>path<sp/>speeds<sp/>inside<sp/>the<sp/>vector<sp/>of<sp/>speeds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;Speed*&gt;::iterator<sp/>i<sp/>=<sp/>this-&gt;speeds_.begin();<sp/>i<sp/>!=<sp/>this-&gt;speeds_.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>vector<sp/>that<sp/>contains<sp/>the<sp/>pointers<sp/>to<sp/>de-allocated<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.clear();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>this-&gt;speeds_.clear();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>vector<sp/>that<sp/>stores<sp/>the<sp/>limits<sp/>for<sp/>each<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>this-&gt;sections_limits_.clear();</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>check<sp/>if<sp/>a<sp/>path<sp/>already<sp/>has<sp/>a<sp/>section<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPath_1ab1a8e985c909ab25bc5a570482fdc496" kindref="member">Path::isEmpty</ref>()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>0<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Add<sp/>a<sp/>new<sp/>path<sp/>section<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPath_1a4e669479c9ea6049ef5d4656ddc90444" kindref="member">Path::addPathSection</ref>(<ref refid="classPathSection" kindref="compound">PathSection</ref><sp/>*<sp/>path_section)<sp/>{<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>vector<sp/>of<sp/>sections<sp/>is<sp/>empty,<sp/>always<sp/>add<sp/>the<sp/>path<sp/>section<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1ab1a8e985c909ab25bc5a570482fdc496" kindref="member">isEmpty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>section<sp/>to<sp/>the<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.emplace_back(path_section);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decide<sp/>now<sp/>if<sp/>the<sp/>path<sp/>is<sp/>going<sp/>to<sp/>be<sp/>a<sp/>complex<sp/>of<sp/>different<sp/>sections<sp/>or<sp/>just</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>simple<sp/>section<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_of_path_<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1a23eb0a156b8f0d92700e549695e3e726" kindref="member">can_be_composed</ref>()<sp/>?<sp/>COMPLEX_PATH<sp/>:<sp/>SIMPLE_PATH;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>section<sp/>bounds<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>sections_limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>have<sp/>a<sp/>complex<sp/>path,<sp/>then<sp/>by<sp/>the<sp/>default<sp/>the<sp/>first<sp/>gamma<sp/>is<sp/>assumed<sp/>to<sp/>start<sp/>at<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sections_limits_.emplace_back(std::make_pair(0,<sp/>path_section-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>()));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>have<sp/>a<sp/>simple<sp/>path,<sp/>then<sp/>by<sp/>default<sp/>the<sp/>gamma<sp/>can<sp/>be<sp/>from<sp/>-inf<sp/>to<sp/>inf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sections_limits_.emplace_back(std::make_pair(path_section-&gt;<ref refid="classPathSection_1ae42551487a9bdc586d26dafbf5f12d9f" kindref="member">getMinGammaValue</ref>(),<sp/>path_section-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>()));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>Type<sp/>of<sp/>path<sp/>is<sp/>complex,<sp/>we<sp/>can<sp/>add<sp/>multiple<sp/>segments<sp/>of<sp/>paths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH<sp/>&amp;&amp;<sp/>path_section-&gt;<ref refid="classPathSection_1a23eb0a156b8f0d92700e549695e3e726" kindref="member">can_be_composed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Add<sp/>the<sp/>new<sp/>segment<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.emplace_back(path_section);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>is<sp/>the<sp/>first<sp/>element,<sp/>then<sp/>the<sp/>section<sp/>bounds<sp/>are<sp/>[0,<sp/>max_gamma[<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>section<sp/>bounds<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>sections_limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sections_limits_.emplace_back(std::make_pair(0,<sp/>path_section-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>()));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>last<sp/>value<sp/>of<sp/>the<sp/>section<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>prev_bounds<sp/>=<sp/>this-&gt;sections_limits_.back();<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>section<sp/>bounds<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>sections_limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sections_limits_.emplace_back(std::make_pair(prev_bounds.second,<sp/>prev_bounds.second<sp/>+<sp/>path_section-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>()));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>path<sp/>is<sp/>simple<sp/>and<sp/>the<sp/>section<sp/>list<sp/>is<sp/>not<sp/>empty,<sp/>we<sp/>cannot<sp/>add<sp/>the<sp/>new<sp/>section<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>corresponding<sp/>Path<sp/>section<sp/>given<sp/>a<sp/>gamma,<sp/>and<sp/>the<sp/>gamma<sp/>normalized</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>for<sp/>that<sp/>section</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">std::tuple&lt;PathSection*,<sp/>double&gt;<sp/><ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">Path::getPathSection</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>has<sp/>no<sp/>sections<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>nullopt<sp/>if<sp/>there<sp/>is<sp/>not<sp/>path<sp/>section<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0.0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one<sp/>path<sp/>section<sp/>in<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>SIMPLE_PATH<sp/>||<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Limit<sp/>the<sp/>gamma<sp/>between<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>bounds<sp/>for<sp/>that<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0]-&gt;limitGamma(gamma);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>section<sp/>and<sp/>the<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0],<sp/>gamma);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>composed<sp/>by<sp/>multiple<sp/>segments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>the<sp/>special<sp/>case<sp/>where<sp/>gamma<sp/>&lt;<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0],<sp/>0.0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>the<sp/>special<sp/>case<sp/>where<sp/>gamma<sp/>&gt;<sp/>max_value_of_last_section*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_.back();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&gt;<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.back(),<sp/>this-&gt;sections_.back()-&gt;getMaxGammaValue());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>the<sp/>section<sp/>that<sp/>corresponds<sp/>to<sp/>that<sp/>gamma<sp/>using<sp/>binary<sp/>search<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>getIndexOfSection(gamma,<sp/>0,<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()-1);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>gamma<sp/>bounds<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[idx];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>corresponding<sp/>section<sp/>and<sp/>gamma<sp/>normalized<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx],<sp/>gamma<sp/>-<sp/>bounds.first);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise,<sp/>some<sp/>strange<sp/>behaviour<sp/>occurred,<sp/>therefore<sp/>return<sp/>NULL<sp/>and<sp/>original<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>gamma);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Recursive<sp/>function<sp/>to<sp/>get<sp/>the<sp/>index<sp/>of<sp/>the<sp/>corresponding<sp/>section<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>Using<sp/>binary<sp/>search<sp/>algorithm.<sp/>In<sp/>worst<sp/>case<sp/>is<sp/>O(log(N))<sp/>complexity</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Path::getIndexOfSection(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>middle<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>left<sp/>+<sp/>(right<sp/>-<sp/>left)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>which<sp/>gamma<sp/>limits<sp/>are<sp/>stored<sp/>in<sp/>that<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[mid];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>within<sp/>bounds,<sp/>then<sp/>we<sp/>have<sp/>the<sp/>correct<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&gt;=<sp/>bounds.first<sp/>&amp;&amp;<sp/>gamma<sp/>&lt;=<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>lower<sp/>than<sp/>the<sp/>bound<sp/>of<sp/>the<sp/>left,<sp/>search<sp/>on<sp/>the<sp/>left<sp/>side*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&lt;<sp/>bounds.first)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;getIndexOfSection(gamma,<sp/>left,<sp/>mid-1);<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>gamma<sp/>&gt;<sp/>bounds.second<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;getIndexOfSection(gamma,<sp/>mid+1,<sp/>right);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>add<sp/>a<sp/>speed<sp/>section<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPath_1aa1d5d6fa713b10ad5eb953da97183a6f" kindref="member">Path::addSpeedSection</ref>(<ref refid="classSpeed" kindref="compound">Speed</ref><sp/>*<sp/>speed_section)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>are<sp/>no<sp/>sections<sp/>yet.<sp/>If<sp/>not,<sp/>then<sp/>do<sp/>not<sp/>add<sp/>the<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>add<sp/>the<sp/>path<sp/>section,<sp/>only<sp/>after<sp/>the<sp/>desired<sp/>speed<sp/>for<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>number<sp/>of<sp/>path_sections<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>number<sp/>of<sp/>speeds_sections*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>&gt;<sp/>this-&gt;speeds_.size())<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>we<sp/>can<sp/>add<sp/>a<sp/>speed<sp/>desired<sp/>to<sp/>the<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;speeds_.emplace_back(speed_section);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>reach<sp/>here<sp/>we<sp/>have<sp/>some<sp/>unplanned<sp/>behaviour,<sp/>so<sp/>do<sp/>not<sp/>add<sp/>to<sp/>the<sp/>list<sp/>of<sp/>speeds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>desired<sp/>speed<sp/>for<sp/>a<sp/>section<sp/>given<sp/>the<sp/>path<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a420f53aa7ecb807b2e004556ff35a26f" kindref="member">Path::eq_vd</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>the<sp/>path<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>the<sp/>path<sp/>is<sp/>not<sp/>empty<sp/>but<sp/>the<sp/>speed<sp/>profile<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{0.0};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>bounds;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>we<sp/>have<sp/>a<sp/>simple<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>SIMPLE_PATH<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>out<sp/>of<sp/>the<sp/>bounds<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[0];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>out<sp/>of<sp/>the<sp/>bounds,<sp/>just<sp/>return<sp/>the<sp/>default<sp/>velocity<sp/>profile<sp/>specified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&lt;<sp/>bounds.first)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[0]-&gt;getDefaultVd(bounds.first,<sp/>this-&gt;sections_[0]-&gt;derivative_norm(bounds.first))};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&gt;<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[0]-&gt;getDefaultVd(bounds.second,<sp/>this-&gt;sections_[0]-&gt;derivative_norm(bounds.second-bounds.first))};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>within<sp/>bounds,<sp/>just<sp/>return<sp/>the<sp/>respective<sp/>speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[0]-&gt;getVd(gamma,<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0]-&gt;<ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">derivative_norm</ref>(gamma))};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>a<sp/>complex<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>bellow<sp/>the<sp/>minimum<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[0];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>&lt;<sp/>min<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;<sp/>bounds.first)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[0]-&gt;getDefaultVd(bounds.first,<sp/>this-&gt;sections_[0]-&gt;derivative_norm(bounds.first))};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>last<sp/>index<sp/>that<sp/>contains<sp/>a<sp/>speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_idx<sp/>=<sp/>this-&gt;speeds_.size()-1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>last<sp/>bound<sp/>for<sp/>the<sp/>last<sp/>speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[last_idx];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&gt;<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>gamma<sp/>is<sp/>bigger<sp/>than<sp/>what<sp/>is<sp/>specified<sp/>in<sp/>last<sp/>speed<sp/>profile,<sp/>just<sp/>return<sp/>the<sp/>default<sp/>speed<sp/>after<sp/>that<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[last_idx]-&gt;getDefaultVd(bounds.second<sp/>-<sp/>bounds.first,<sp/>this-&gt;sections_[last_idx]-&gt;derivative_norm(bounds.second<sp/>-<sp/>bounds.first))};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>index<sp/>to<sp/>where<sp/>the<sp/>correct<sp/>profile<sp/>is<sp/>stored<sp/>for<sp/>this<sp/>gamma<sp/>(since<sp/>gamma<sp/>is<sp/>within<sp/>bounds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>getIndexOfSection(gamma,<sp/>0,<sp/>last_idx);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>gamma<sp/>bounds<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[idx];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>internal<sp/>gamma<sp/>corresponding<sp/>to<sp/>that<sp/>particular<sp/>section/speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>gamma<sp/>-<sp/>bounds.first;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>speed<sp/>profile<sp/>for<sp/>that<sp/>particular<sp/>internal<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[idx]-&gt;getVd(gamma,<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx]-&gt;<ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">derivative_norm</ref>(gamma))};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>did<sp/>not<sp/>go<sp/>inside<sp/>the<sp/>if<sp/>statements,<sp/>then<sp/>some<sp/>special<sp/>bug<sp/>occurred.<sp/>In<sp/>that</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>*<sp/>case<sp/>return<sp/>the<sp/>null<sp/>optional<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>desired<sp/>acceleration<sp/>for<sp/>a<sp/>section<sp/>given<sp/>the<sp/>path<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a7494a3bf59001a8db017d65e8d012470" kindref="member">Path::eq_d_vd</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>the<sp/>path<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>the<sp/>path<sp/>is<sp/>not<sp/>empty<sp/>but<sp/>the<sp/>speed<sp/>profile<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{0.0};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>bounds;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>case<sp/>where<sp/>we<sp/>have<sp/>a<sp/>simple<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>SIMPLE_PATH<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>out<sp/>of<sp/>the<sp/>bounds<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[0];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>out<sp/>of<sp/>the<sp/>bounds,<sp/>just<sp/>return<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&lt;<sp/>bounds.first<sp/>||<sp/>gamma<sp/>&gt;<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{0.0};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>gamma<sp/>is<sp/>within<sp/>bounds,<sp/>just<sp/>return<sp/>the<sp/>respective<sp/>acceleration<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[0]-&gt;get_d_Vd(gamma,<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0]-&gt;<ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">derivative_norm</ref>(gamma))};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>a<sp/>complex<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH<sp/>&amp;&amp;<sp/>this-&gt;speeds_.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>bellow<sp/>the<sp/>minimum<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[0];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>&lt;<sp/>min<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;<sp/>bounds.first)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{0.0};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>last<sp/>index<sp/>that<sp/>contains<sp/>a<sp/>speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_idx<sp/>=<sp/>this-&gt;speeds_.size()-1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>gamma<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>last<sp/>bound<sp/>for<sp/>the<sp/>last<sp/>speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[last_idx];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&gt;<sp/>bounds.second)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>gamma<sp/>is<sp/>bigger<sp/>than<sp/>what<sp/>is<sp/>specified<sp/>in<sp/>last<sp/>speed<sp/>profile,<sp/>just<sp/>return<sp/>0.0<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{0.0};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>index<sp/>to<sp/>where<sp/>the<sp/>correct<sp/>profile<sp/>is<sp/>stored<sp/>for<sp/>this<sp/>gamma<sp/>(since<sp/>gamma<sp/>is<sp/>within<sp/>bounds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>getIndexOfSection(gamma,<sp/>0,<sp/>last_idx);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>gamma<sp/>bounds<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[idx];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>internal<sp/>gamma<sp/>corresponding<sp/>to<sp/>that<sp/>particular<sp/>section/speed<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>gamma<sp/>-<sp/>bounds.first;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>acceleration<sp/>profile<sp/>for<sp/>that<sp/>particular<sp/>internal<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;speeds_[idx]-&gt;get_d_Vd(gamma,<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx]-&gt;<ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">derivative_norm</ref>(gamma))};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>did<sp/>not<sp/>go<sp/>inside<sp/>the<sp/>if<sp/>statements,<sp/>then<sp/>some<sp/>special<sp/>bug<sp/>occurred.<sp/>In<sp/>that</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/>*<sp/>case<sp/>return<sp/>the<sp/>null<sp/>optional<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>corresponding<sp/>position<sp/>to<sp/>the<sp/>gamma<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">std::optional&lt;Eigen::Vector3d&gt;<sp/><ref refid="classPath_1aee6359127227c488a886276f67e0820c" kindref="member">Path::eq_pd</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>pd;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>that<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>desired<sp/>position<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>pd<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1a8bfb8c4e2ee0175687673af20ee1f109" kindref="member">eq_pd</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>desired<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;Eigen::Vector3d&gt;{pd};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>nothing<sp/>if<sp/>there<sp/>is<sp/>no<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">std::optional&lt;Eigen::Vector3d&gt;<sp/><ref refid="classPath_1ada92795b8c4bb976e4fd4a6de8f31771" kindref="member">Path::eq_d_pd</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_pd;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>that<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>derivative<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>d_pd<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1ae07e37a99265be8b16ebadf05ea0f9fe" kindref="member">eq_d_pd</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>desired<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;Eigen::Vector3d&gt;{d_pd};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>nothing<sp/>if<sp/>there<sp/>is<sp/>no<sp/>path<sp/>section*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">std::optional&lt;Eigen::Vector3d&gt;<sp/><ref refid="classPath_1abb8121d90ae9a4df05fb8b6818631af6" kindref="member">Path::eq_dd_pd</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>dd_pd;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>that<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_pd<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1aebd57c623306c783cd374a5e7f3f25ad" kindref="member">eq_dd_pd</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>desired<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;Eigen::Vector3d&gt;{dd_pd};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>nothing<sp/>if<sp/>there<sp/>is<sp/>no<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a9c7755eaf564386d52391bc42aac43e4" kindref="member">Path::tangent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>the<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>tangent<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1a558020d4864409b74ef73ecd3f64456c" kindref="member">tangent</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{result};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a5c31f062b70f4304385d72b7865895a2" kindref="member">Path::curvature</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>the<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section){</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>curvature<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1adffd7389e5870df945c682481713ba76" kindref="member">curvature</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{result};</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">Path::derivative_norm</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>path<sp/>section<sp/>corresponding<sp/>to<sp/>the<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classPathSection" kindref="compound">PathSection</ref>*<sp/>path_section<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_internal;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>std::tie<sp/>(path_section,<sp/>gamma_internal)<sp/>=<sp/>this-&gt;<ref refid="classPath_1a2b93975e199423d840cac7de366588bb" kindref="member">getPathSection</ref>(gamma);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>section<sp/>in<sp/>the<sp/>path<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path_section){</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>derivative_norm<sp/>for<sp/>that<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>path_section-&gt;<ref refid="classPathSection_1a822d6b196a48e1fbd47dc3548ebd4a50" kindref="member">derivative_norm</ref>(gamma_internal);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{result};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>gamma<sp/>corresponding<sp/>to<sp/>the<sp/>closest<sp/>point<sp/>on<sp/>the<sp/>path</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>relative<sp/>to<sp/>the<sp/>coordinate<sp/>passed<sp/>as<sp/>argument<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="classPath_1a3efe44f1d0c2b1b70538bc7b5d1797b4" kindref="member">Path::getClosestGamma</ref>(Eigen::Vector3d<sp/>&amp;coordinate)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>the<sp/>special<sp/>case<sp/>where<sp/>the<sp/>path<sp/>is<sp/>still<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1ab1a8e985c909ab25bc5a570482fdc496" kindref="member">isEmpty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>only<sp/>have<sp/>one<sp/>section<sp/>it<sp/>is<sp/>easy!<sp/>We<sp/>only<sp/>need<sp/>to<sp/>check<sp/>for<sp/>the<sp/>gamma</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>that<sp/>section<sp/>that<sp/>yields<sp/>the<sp/>closest<sp/>point</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>SIMPLE_PATH)<sp/>{<sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gamma_closest_point_<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[0]-&gt;getClosestPointGamma(coordinate);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;gamma_closest_point_};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>path<sp/>composed<sp/>of<sp/>multiple<sp/>sections,<sp/>first<sp/>we<sp/>must<sp/>select<sp/>the<sp/>section<sp/></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>only<sp/>then<sp/>get<sp/>the<sp/>gamma<sp/>for<sp/>that<sp/>particular<sp/>section</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;type_of_path_<sp/>==<sp/>COMPLEX_PATH)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declare<sp/>a<sp/>set<sp/>of<sp/>auxiliary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx_section_smallest_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_of_smallest_error<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>smallest_error_distance<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_distance<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>are<sp/>checking<sp/>the<sp/>closest<sp/>point<sp/>for<sp/>the<sp/>first<sp/>time*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;first_check_on_closest_point_)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_check_on_closest_point_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_normalized<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>path<sp/>section,<sp/>get<sp/>the<sp/>gamma_closest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>normalized<sp/>gamma<sp/>corresponding<sp/>to<sp/>that<sp/>particular<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_normalized<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[i]-&gt;getClosestPointGamma(coordinate);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO(&quot;Index<sp/>%d<sp/>-<sp/>First<sp/>gamma<sp/>norm:<sp/>%lf&quot;,<sp/>i,<sp/>gamma_normalized);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>error<sp/>distance<sp/>for<sp/>that<sp/>particular<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_distance<sp/>=<sp/>(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[i]-&gt;eq_pd(gamma_normalized)<sp/>-<sp/>coordinate).norm();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>error<sp/>is<sp/>smaller<sp/>than<sp/>in<sp/>previous<sp/>sections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_distance<sp/>&lt;<sp/>smallest_error_distance)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_section_smallest_error<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_of_smallest_error<sp/>=<sp/>gamma_normalized;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallest_error_distance<sp/>=<sp/>error_distance;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>first<sp/>iteration,<sp/>we<sp/>assume<sp/>that<sp/>the<sp/>vehicle<sp/>does<sp/>not<sp/>jump</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>around<sp/>and<sp/>moves<sp/>continuously.<sp/>Therefore<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check<sp/>in<sp/>all<sp/>the<sp/>sections.<sp/>Only</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>the<sp/>current<sp/>section<sp/>and<sp/>the<sp/>one<sp/>imediatyly<sp/>next!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>By<sp/>default<sp/>the<sp/>index<sp/>of<sp/>the<sp/>section<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>last<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx_section_smallest_error<sp/>=<sp/>this-&gt;index_section_smallest_error_;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>new<sp/>gamma<sp/>for<sp/>the<sp/>closest<sp/>point<sp/>in<sp/>the<sp/>same<sp/>section<sp/>as<sp/>the<sp/>previous<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gamma_of_smallest_error<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx_section_smallest_error]-&gt;getClosestPointGamma(coordinate);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>error<sp/>distance<sp/>for<sp/>that<sp/>particular<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_distance<sp/>=<sp/>(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx_section_smallest_error]-&gt;eq_pd(gamma_of_smallest_error)<sp/>-<sp/>coordinate).norm();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>at<sp/>the<sp/>gamma<sp/>normalized<sp/>for<sp/>the<sp/>next<sp/>section<sp/>(if<sp/>it<sp/>exists)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx_section_smallest_error<sp/>&lt;<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test_next<sp/>=<sp/>this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx_section_smallest_error<sp/>+<sp/>1]-&gt;getClosestPointGamma(coordinate);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>next_err_dist<sp/>=<sp/>(this-&gt;<ref refid="classPath_1af78fdfd568415c2dd81b31611f513675" kindref="member">sections_</ref>[idx_section_smallest_error<sp/>+<sp/>1]-&gt;eq_pd(test_next)<sp/>-<sp/>coordinate).norm();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>error<sp/>is<sp/>smaller<sp/>in<sp/>the<sp/>next<sp/>section,<sp/>just<sp/>switch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(next_err_dist<sp/>&lt;<sp/>error_distance)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_section_smallest_error<sp/>=<sp/>idx_section_smallest_error<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_of_smallest_error<sp/>=<sp/>test_next;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transform<sp/>the<sp/>gamma_normalized<sp/>into<sp/>the<sp/>gamma<sp/>of<sp/>the<sp/>complete<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>bounds<sp/>=<sp/>this-&gt;sections_limits_[idx_section_smallest_error];</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gamma_closest_point_<sp/>=<sp/>bounds.first<sp/>+<sp/>gamma_of_smallest_error;<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>auxiliary<sp/>variables<sp/>for<sp/>the<sp/>next<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;index_section_smallest_error_<sp/>=<sp/>idx_section_smallest_error;<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::optional&lt;double&gt;{this-&gt;gamma_closest_point_};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>an<sp/>unexpected<sp/>case<sp/>ocurred<sp/>and<sp/>we<sp/>should<sp/>not<sp/>return<sp/>a<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">std::pair&lt;double,<sp/>double&gt;<sp/><ref refid="classPath_1a44594e858ab8b922a9e7055b5d008ea1" kindref="member">Path::getMinMaxGamma</ref>()<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>empty,<sp/>if<sp/>so<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>gamma<sp/>is<sp/>0.0<sp/>by<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classPath_1ab1a8e985c909ab25bc5a570482fdc496" kindref="member">isEmpty</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>lower_bound<sp/>=<sp/>this-&gt;sections_limits_.front();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>upper_bound<sp/>=<sp/>this-&gt;sections_limits_.back();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(lower_bound.first,<sp/>upper_bound.second);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/algorithms/Path.cpp"/>
  </compounddef>
</doxygen>
