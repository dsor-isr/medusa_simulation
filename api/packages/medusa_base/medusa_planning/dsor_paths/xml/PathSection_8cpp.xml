<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="PathSection_8cpp" kind="file" language="C++">
    <compoundname>PathSection.cpp</compoundname>
    <includes refid="PathSection_8h" local="yes">PathSection.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">limits</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>Eigen/Core</label>
      </node>
      <node id="2">
        <label>PathSection.h</label>
        <link refid="PathSection_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/algorithms/path_sections/PathSection.cpp</label>
        <link refid="PathSection_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PathSection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constructor<sp/>for<sp/>the<sp/>Path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="classPathSection_1a9ec8116da8291b32971bf3728cd06d02" kindref="member">PathSection::PathSection</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_be_composed)<sp/>:<sp/>can_be_composed_(can_be_composed)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>By<sp/>default,<sp/>if<sp/>can_be_composed<sp/>is<sp/>true,<sp/>the<sp/>section<sp/>must<sp/>vary<sp/>between<sp/>[0<sp/>-<sp/>some<sp/>value]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;can_be_composed_<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>this-&gt;min_value_gamma_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Virtual<sp/>Destructor<sp/>for<sp/>the<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="classPathSection_1ad061288d4c5446b96cd8403cf46e3530" kindref="member">PathSection::~PathSection</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>method<sp/>for<sp/>computing<sp/>the<sp/>tangent<sp/>to<sp/>a<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a558020d4864409b74ef73ecd3f64456c" kindref="member">PathSection::tangent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Limit<sp/>the<sp/>path<sp/>parameter<sp/>between<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1a6e1733fef57bb0fdb83fd230e6d76d79" kindref="member">limitGamma</ref>(t);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>deivative<sp/>of<sp/>the<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1ae07e37a99265be8b16ebadf05ea0f9fe" kindref="member">eq_d_pd</ref>(t);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>tangent<sp/>to<sp/>the<sp/>2D<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>psi<sp/>=<sp/>atan2(d_pd[1],<sp/>d_pd[0]);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psi;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>method<sp/>for<sp/>computing<sp/>the<sp/>path<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1adffd7389e5870df945c682481713ba76" kindref="member">PathSection::curvature</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Limit<sp/>the<sp/>path<sp/>parameter<sp/>between<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1a6e1733fef57bb0fdb83fd230e6d76d79" kindref="member">limitGamma</ref>(t);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1ae07e37a99265be8b16ebadf05ea0f9fe" kindref="member">eq_d_pd</ref>(t);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>dd_pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1aebd57c623306c783cd374a5e7f3f25ad" kindref="member">eq_dd_pd</ref>(t);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1adffd7389e5870df945c682481713ba76" kindref="member">curvature</ref><sp/>=<sp/>(d_pd[0]<sp/>*<sp/>dd_pd[1]<sp/>-<sp/>d_pd[1]<sp/>*<sp/>dd_pd[0])<sp/>/<sp/>(pow(d_pd.norm(),<sp/>3));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1adffd7389e5870df945c682481713ba76" kindref="member">curvature</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Computes<sp/>the<sp/>norm<sp/>of<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>path<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a822d6b196a48e1fbd47dc3548ebd4a50" kindref="member">PathSection::derivative_norm</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Limit<sp/>the<sp/>path<sp/>parameter<sp/>between<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1a6e1733fef57bb0fdb83fd230e6d76d79" kindref="member">limitGamma</ref>(t);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPathSection_1ae07e37a99265be8b16ebadf05ea0f9fe" kindref="member">eq_d_pd</ref>(t).norm();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>whether<sp/>the<sp/>path<sp/>section<sp/>can<sp/>be<sp/>composed<sp/>with<sp/>other<sp/>sections<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a23eb0a156b8f0d92700e549695e3e726" kindref="member">PathSection::can_be_composed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;can_be_composed_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>update<sp/>the<sp/>max<sp/>value<sp/>of<sp/>the<sp/>gamma<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1af038ff4fc933afc3ee0f47023fc18cdc" kindref="member">PathSection::setMaxGammaValue</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_max)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>update<sp/>if<sp/>the<sp/>gamma_max<sp/>is<sp/>greater<sp/>than<sp/>gamma_min<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma_max<sp/>&gt;<sp/>this-&gt;min_value_gamma_)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;max_value_gamma_<sp/>=<sp/>gamma_max;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>do<sp/>not<sp/>update<sp/>the<sp/>value<sp/>as<sp/>its<sp/>not<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>update<sp/>the<sp/>min<sp/>value<sp/>of<sp/>the<sp/>gamma<sp/>paramter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1abfac7845d2c5a4c63f369de0d44143b6" kindref="member">PathSection::setMinGammaValue</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_min)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>consider<sp/>update<sp/>if<sp/>gamma_min<sp/>is<sp/>smaller<sp/>than<sp/>gamma_max*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma_min<sp/>&lt;<sp/>this-&gt;max_value_gamma_)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>section<sp/>cannot<sp/>be<sp/>compose<sp/>with<sp/>other,<sp/>any<sp/>value<sp/>will<sp/>do<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;can_be_composed_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;min_value_gamma_<sp/>=<sp/>gamma_min;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>section<sp/>can<sp/>be<sp/>composed<sp/>with<sp/>other<sp/>sections,<sp/>it<sp/>will<sp/>not<sp/>update<sp/>the<sp/>minimum</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>value<sp/>as<sp/>its<sp/>required<sp/>for<sp/>the<sp/>minimum<sp/>value<sp/>to<sp/>be<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>do<sp/>not<sp/>update<sp/>that<sp/>value<sp/>as<sp/>its<sp/>not<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>max<sp/>value<sp/>the<sp/>gamma<sp/>can<sp/>achieve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">PathSection::getMaxGammaValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;max_value_gamma_;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>get<sp/>the<sp/>min<sp/>value<sp/>the<sp/>gamma<sp/>can<sp/>achieve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1ae42551487a9bdc586d26dafbf5f12d9f" kindref="member">PathSection::getMinGammaValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;min_value_gamma_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Auxiliar<sp/>method<sp/>to<sp/>limit<sp/>gamma<sp/>between<sp/>0<sp/>and<sp/>the<sp/>max<sp/>value<sp/>of<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a6e1733fef57bb0fdb83fd230e6d76d79" kindref="member">PathSection::limitGamma</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>&gt;<sp/>this-&gt;max_value_gamma_)<sp/>t<sp/>=<sp/>this-&gt;max_value_gamma_;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>&lt;<sp/>this-&gt;min_value_gamma_)<sp/>t<sp/>=<sp/>this-&gt;min_value_gamma_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a78793a75681c551d37012591404af39c" kindref="member">PathSection::getClosestPointGamma</ref>(Eigen::Vector3d<sp/>&amp;coordinate)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>it<sp/>is<sp/>the<sp/>first<sp/>iteration,<sp/>try<sp/>to<sp/>get<sp/>a<sp/>good<sp/>initialization,<sp/>using<sp/>bissection<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;first_iteration_)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;first_iteration_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gamma_o_<sp/>=<sp/><ref refid="classPathSection_1abf595d551b130edbec7a103391a0b6dc" kindref="member">getInitialGammaEstimate</ref>(coordinate,<sp/>this-&gt;default_num_partitions_,<sp/>this-&gt;min_value_gamma_,<sp/>this-&gt;max_value_gamma_);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;gamma_o_;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_estimated<sp/>=<sp/><ref refid="classPathSection_1a52ee3a35d0da5d522a10345587e9333f" kindref="member">GradientDescent</ref>(this-&gt;gamma_o_,<sp/>coordinate,<sp/>this-&gt;tolerance_);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>this<sp/>value<sp/>to<sp/>use<sp/>as<sp/>initialization<sp/>for<sp/>a<sp/>next<sp/>usage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>this-&gt;gamma_o_<sp/>=<sp/>gamma_estimated;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gamma_estimated;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>compute<sp/>the<sp/>gradient<sp/>descent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1a52ee3a35d0da5d522a10345587e9333f" kindref="member">PathSection::GradientDescent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_o,<sp/>Eigen::Vector3d<sp/>&amp;x_pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>initial<sp/>estimate<sp/>value<sp/>for<sp/>the<sp/>parameter<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>gamma_o;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_k<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_k<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha_k<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>stoping<sp/>criteria<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stop<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>gradient<sp/>of<sp/>the<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>g_k<sp/>=<sp/>this-&gt;grad_F(gamma,<sp/>x_pos);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>stopping<sp/>criteria<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(g_k)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>descent<sp/>direction<sp/>the<sp/>oposite<sp/>of<sp/>the<sp/>gradient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d_k<sp/>=<sp/>-g_k;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>backtracking<sp/>to<sp/>have<sp/>adpatative<sp/>step<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha_k<sp/>=<sp/>this-&gt;backtrack(gamma,<sp/>x_pos,<sp/>d_k,<sp/>g_k,<sp/>this-&gt;alpha_hat_,<sp/>this-&gt;beta_,<sp/>this-&gt;epsilon_);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>theta_k+1<sp/>=<sp/>theta_k<sp/>+<sp/>alpha_k*d_k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>gamma<sp/>+<sp/>alpha_k<sp/>*<sp/>d_k;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(Addition<sp/>to<sp/>the<sp/>algorithm)<sp/>If<sp/>gamma<sp/>is<sp/>outside<sp/>the<sp/>bounds<sp/>of<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>&lt;<sp/>this-&gt;<ref refid="classPathSection_1ae42551487a9bdc586d26dafbf5f12d9f" kindref="member">getMinGammaValue</ref>())<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPathSection_1ae42551487a9bdc586d26dafbf5f12d9f" kindref="member">getMinGammaValue</ref>();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&gt;<sp/>this-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>())<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classPathSection_1ac7d453fb1c8c1553e75ac5b5bae82950" kindref="member">getMaxGammaValue</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gamma;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>compute<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>function<sp/>we<sp/>are<sp/>trying<sp/>to<sp/>minimize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PathSection::grad_F(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/>Eigen::Vector3d<sp/>&amp;x_pos)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1a8bfb8c4e2ee0175687673af20ee1f109" kindref="member">eq_pd</ref>(gamma);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>d_pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1ae07e37a99265be8b16ebadf05ea0f9fe" kindref="member">eq_d_pd</ref>(gamma);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pd<sp/>-<sp/>x_pos).transpose()<sp/>*<sp/>d_pd;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Method<sp/>to<sp/>compute<sp/>the<sp/>function<sp/>we<sp/>are<sp/>trying<sp/>to<sp/>minimize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PathSection::F(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/>Eigen::Vector3d<sp/>&amp;x_pos)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>pd<sp/>=<sp/>this-&gt;<ref refid="classPathSection_1a8bfb8c4e2ee0175687673af20ee1f109" kindref="member">eq_pd</ref>(gamma);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff_norm<sp/>=<sp/>(pd<sp/>-<sp/>x_pos).norm();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff_norm;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>Method<sp/>to<sp/>compute<sp/>the<sp/>backtrack<sp/>for<sp/>the<sp/>gradient<sp/>descent<sp/>in<sp/>order<sp/>to<sp/>have</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>adaptative<sp/>step<sp/>size<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PathSection::backtrack(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/>Eigen::Vector3d<sp/>&amp;x_pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_k,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>grad_f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha_hat,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Auxiliar<sp/>variables<sp/>for<sp/>the<sp/>computations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f3;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Auxiliary<sp/>variable<sp/>to<sp/>check<sp/>if<sp/>we<sp/>are<sp/>stuck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>last_f1<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>initial<sp/>value<sp/>for<sp/>the<sp/>parameter<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha_k<sp/>=<sp/>alpha_hat;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stop<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>f(gamma_k<sp/>+<sp/>alpha_k<sp/>*<sp/>d_k)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>this-&gt;F(gamma<sp/>+<sp/>alpha_k<sp/>*<sp/>d_k,<sp/>x_pos);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>f(gamma_k)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>f2<sp/>=<sp/>this-&gt;F(gamma,<sp/>x_pos);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>gradient<sp/>of<sp/>f(xk)&apos;<sp/>*<sp/>(alpha_k<sp/>*<sp/>d_k)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>f3<sp/>=<sp/>epsilon<sp/>*<sp/>grad_f<sp/>*<sp/>(alpha_k<sp/>*<sp/>d_k);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(Addition<sp/>to<sp/>the<sp/>algorithm)<sp/>Check<sp/>if<sp/>we<sp/>are<sp/>stuck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_f1<sp/>==<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Since<sp/>our<sp/>function<sp/>is<sp/>finite,<sp/>we<sp/>must<sp/>guarantee<sp/>we<sp/>do<sp/>not<sp/>get<sp/>stuck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha_k;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_f1<sp/>=<sp/>f1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>should<sp/>update<sp/>the<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f1<sp/>&gt;<sp/>f2<sp/>+<sp/>f3)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha_k<sp/>=<sp/>beta<sp/>*<sp/>alpha_k;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha_k;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Auxiliar<sp/>method<sp/>to<sp/>get<sp/>the<sp/>initial<sp/>gamma<sp/>estimate<sp/>when<sp/>using<sp/>the<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>path<sp/>in<sp/>closest<sp/>point<sp/>mode</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1abf595d551b130edbec7a103391a0b6dc" kindref="member">PathSection::getInitialGammaEstimate</ref>(Eigen::Vector3d<sp/>&amp;x_pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_partitions,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_val,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_val)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validate<sp/>the<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_partitions<sp/>&lt;=<sp/>0<sp/>||<sp/>min_val<sp/>&gt;<sp/>max_val)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Arguments<sp/>of<sp/>getInitialGammaEstimate<sp/>method<sp/>are<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Divide<sp/>the<sp/>section<sp/>into<sp/>n<sp/>parts<sp/>and<sp/>search<sp/>for<sp/>local<sp/>minimums</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>those<sp/>n<sp/>parts<sp/>of<sp/>the<sp/>section.<sp/>The<sp/>minimum<sp/>of<sp/>those<sp/>local<sp/>minimus</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/>*<sp/>have<sp/>higher<sp/>change<sp/>of<sp/>being<sp/>the<sp/>global<sp/>minimum<sp/></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>(max_val<sp/>-<sp/>min_val)<sp/>/<sp/>num_partitions;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>most<sp/>likely<sp/>gamma<sp/>for<sp/>the<sp/>minimum<sp/>of<sp/>each<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>begin_value<sp/>=<sp/>min_val;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_best<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma_best<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_partitions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>best<sp/>gamma<sp/>for<sp/>this<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="classPathSection_1ad021a100a135860c764461bc289707e3" kindref="member">bisection</ref>(x_pos,<sp/>begin_value,<sp/>begin_value<sp/>+<sp/>l);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>distance<sp/>when<sp/>using<sp/>that<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>(x_pos<sp/>-<sp/>this-&gt;<ref refid="classPathSection_1a8bfb8c4e2ee0175687673af20ee1f109" kindref="member">eq_pd</ref>(gamma)).norm();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>distance<sp/>error<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>best<sp/>until<sp/>now,<sp/>update<sp/>the<sp/>best<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>&lt;<sp/>error_best)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_best<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gamma_best<sp/>=<sp/>gamma;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>partition<sp/>to<sp/>look<sp/>at<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>begin_value<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gamma_best;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>bissection<sp/>of<sp/>a<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPathSection_1ad021a100a135860c764461bc289707e3" kindref="member">PathSection::bisection</ref>(Eigen::Vector3d<sp/>&amp;x_pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>on<sp/>the<sp/>bissection<sp/>method<sp/>until<sp/>the<sp/>threshold<sp/>is<sp/>met<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((b<sp/>-<sp/>a)<sp/>&gt;=<sp/>this-&gt;EP_bissection_)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>middle<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(a<sp/>+<sp/>b)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>middle<sp/>point<sp/>is<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_F(c,<sp/>x_pos)<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decide<sp/>the<sp/>side<sp/>to<sp/>repeat<sp/>the<sp/>steps<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_F(c,<sp/>x_pos)<sp/>*<sp/>grad_F(a,<sp/>x_pos)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/algorithms/path_sections/PathSection.cpp"/>
  </compounddef>
</doxygen>
