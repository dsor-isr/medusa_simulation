<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="PathNode_8cpp" kind="file" language="C++">
    <compoundname>PathNode.cpp</compoundname>
    <includes refid="PathNode_8h" local="yes">PathNode.h</includes>
    <incdepgraph>
      <node id="16">
        <label>limits</label>
      </node>
      <node id="11">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="13">
        <label>PathSection.h</label>
        <link refid="PathSection_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ros/PathNode.cpp</label>
        <link refid="PathNode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="27">
        <label>dsor_paths/ResetPath.h</label>
      </node>
      <node id="32">
        <label>dsor_paths/SpawnLine.h</label>
      </node>
      <node id="14">
        <label>Eigen/Core</label>
      </node>
      <node id="9">
        <label>auv_msgs/NavigationStatus.h</label>
      </node>
      <node id="17">
        <label>Speed.h</label>
        <link refid="Speed_8h_source"/>
      </node>
      <node id="23">
        <label>Circle2D.h</label>
        <link refid="Circle2D_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>std_msgs/Float64.h</label>
      </node>
      <node id="8">
        <label>dsor_paths/PathData.h</label>
      </node>
      <node id="28">
        <label>dsor_paths/SetMode.h</label>
      </node>
      <node id="31">
        <label>dsor_paths/SpawnCircle2D.h</label>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>optional</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="12">
        <label>Path.h</label>
        <link refid="Path_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>dsor_paths/SetConstSpeed.h</label>
      </node>
      <node id="10">
        <label>medusa_msgs/mState.h</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="18">
        <label>array</label>
      </node>
      <node id="22">
        <label>Bernoulli.h</label>
        <link refid="Bernoulli_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ros/ros.h</label>
      </node>
      <node id="15">
        <label>math.h</label>
      </node>
      <node id="21">
        <label>Arc2D.h</label>
        <link refid="Arc2D_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ConstVehicleSpeed.h</label>
        <link refid="ConstVehicleSpeed_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Line.h</label>
        <link refid="Line_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>PathNode.h</label>
        <link refid="PathNode_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ConstRabbitSpeed.h</label>
        <link refid="ConstRabbitSpeed_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>dsor_paths/SpawnBernoulli.h</label>
      </node>
      <node id="29">
        <label>dsor_paths/SpawnArc2D.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="PathNode_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Main method. The entry point of the <ref refid="classPathNode" kindref="compound">PathNode</ref> program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of arguments passed to the program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector with the arguments passed to the program</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int simbolizing success of failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/PathNode.cpp" line="231" column="5" bodyfile="src/ros/PathNode.cpp" bodystart="231" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PathNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="classPathNode_1a7b28e61b64ecd0505b4612283cc5d493" kindref="member">PathNode::PathNode</ref>(ros::NodeHandle<sp/>*nh,<sp/>ros::NodeHandle<sp/>*nh_p):nh_(*nh),<sp/>nh_p_(*nh_p){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Instantiate<sp/>the<sp/>ROS<sp/>subscribers,<sp/>publishers,<sp/>etc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;in<sp/>class<sp/>constructor<sp/>of<sp/>PathNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>this-&gt;loadParams();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>this-&gt;initializeSubscribers();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>this-&gt;initializePublishers();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>this-&gt;initializeServices();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>this-&gt;initializeTimer();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>to<sp/>store<sp/>the<sp/>Path<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>this-&gt;path_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classPath" kindref="compound">Path</ref>();</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classPathNode_1a2bb54f07ceaa7548199960080b4b95a2" kindref="member">PathNode::~PathNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>all<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>this-&gt;path_pub_.shutdown();<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>this-&gt;virtual_target_pub_.shutdown();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>all<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>this-&gt;gamma_sub_.shutdown();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_sub_.shutdown();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*Shutdown<sp/>all<sp/>the<sp/>services<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>this-&gt;shutdownServices();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>the<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;path_;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>this-&gt;nh_.shutdown();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::loadParams()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Loading<sp/>Parameters<sp/>for<sp/>PathNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>this-&gt;frame_id_<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;frame_id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>PathNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::string<sp/>gamma_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/gamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::string<sp/>vehicle_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/vehicle_state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>this-&gt;gamma_sub_<sp/>=<sp/>nh_.subscribe(gamma_topic,<sp/>10,<sp/>&amp;PathNode::gammaCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_sub_<sp/>=<sp/>nh_.subscribe(vehicle_topic,<sp/>10,<sp/>&amp;PathNode::vehicleStateCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>PathNode&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::string<sp/>path_data_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/path_data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::string<sp/>virtual_target_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/virtual_target_state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>this-&gt;path_pub_<sp/>=<sp/>nh_.advertise&lt;dsor_paths::PathData&gt;(path_data_topic,<sp/>1);<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>this-&gt;virtual_target_pub_<sp/>=<sp/>nh_.advertise&lt;medusa_msgs::mState&gt;(virtual_target_topic,<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::initializeTimer()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>timer_<sp/>=<sp/>nh_.createTimer(ros::Duration(1.0/PathNode::nodeFrequency()),<sp/>&amp;PathNode::timerIterCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PathNode::nodeFrequency()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_frequency<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;node_frequency&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Node<sp/>will<sp/>run<sp/>at<sp/>:<sp/>%lf<sp/>[hz]&quot;</highlight><highlight class="normal">,<sp/>node_frequency);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::timerIterCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declare<sp/>the<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>values<sp/>of<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::optional&lt;Eigen::Vector3d&gt;<sp/>pd;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::optional&lt;Eigen::Vector3d&gt;<sp/>d_pd;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::optional&lt;Eigen::Vector3d&gt;<sp/>dd_pd;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>tangent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>curvature<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>derivative_norm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>vd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::optional&lt;double&gt;<sp/>d_vd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vehicle_speed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>min_max_gamma_path;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>mode<sp/>is<sp/>to<sp/>use<sp/>the<sp/>closest<sp/>point<sp/>to<sp/>the<sp/>vehicle,<sp/>than<sp/>get<sp/>the<sp/>gamma<sp/>of<sp/>that<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;closer_point_mode_)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>just<sp/>override<sp/>the<sp/>gamma<sp/>with<sp/>the<sp/>one<sp/>corresponding<sp/>to<sp/>the<sp/>closest<sp/>point<sp/>on<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gamma_<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a3efe44f1d0c2b1b70538bc7b5d1797b4" kindref="member">getClosestGamma</ref>(this-&gt;vehicle_pos_);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>the<sp/>message<sp/>to<sp/>send<sp/>with<sp/>the<sp/>path<sp/>information<sp/>and<sp/>with<sp/>the<sp/>virtual<sp/>target<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>dsor_paths::PathData<sp/>msg;<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>medusa_msgs::mState<sp/>vt_state_msg;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!this-&gt;path_-&gt;<ref refid="classPath_1ab1a8e985c909ab25bc5a570482fdc496" kindref="member">isEmpty</ref>()<sp/>&amp;&amp;<sp/>this-&gt;gamma_.has_value())<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>position,<sp/>first<sp/>and<sp/>second<sp/>derivatives<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>pd<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1aee6359127227c488a886276f67e0820c" kindref="member">eq_pd</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>d_pd<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1ada92795b8c4bb976e4fd4a6de8f31771" kindref="member">eq_d_pd</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_pd<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1abb8121d90ae9a4df05fb8b6818631af6" kindref="member">eq_dd_pd</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>values<sp/>of<sp/>the<sp/>tangent<sp/>angle,<sp/>curvature<sp/>and<sp/>derivative_norm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>tangent<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a9c7755eaf564386d52391bc42aac43e4" kindref="member">tangent</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>curvature<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a5c31f062b70f4304385d72b7865895a2" kindref="member">curvature</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>derivative_norm<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a72b33276dc06a28e590fe29c774cce14" kindref="member">derivative_norm</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a420f53aa7ecb807b2e004556ff35a26f" kindref="member">eq_vd</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>d_vd<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a7494a3bf59001a8db017d65e8d012470" kindref="member">eq_d_vd</ref>(this-&gt;gamma_.value());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>vehicle<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_speed<sp/>=<sp/>vd.value_or(0.0)<sp/>*<sp/>derivative_norm.value_or(0.0);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>values<sp/>for<sp/>the<sp/>minimum<sp/>and<sp/>maximum<sp/>values<sp/>allowed<sp/>for<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>min_max_gamma_path<sp/>=<sp/>this-&gt;path_-&gt;<ref refid="classPath_1a44594e858ab8b922a9e7055b5d008ea1" kindref="member">getMinMaxGamma</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>all<sp/>the<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pd<sp/>&amp;&amp;<sp/>d_pd<sp/>&amp;&amp;<sp/>dd_pd<sp/>&amp;&amp;<sp/>tangent<sp/>&amp;&amp;<sp/>curvature<sp/>&amp;&amp;<sp/>derivative_norm)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Header<sp/>for<sp/>the<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.header.seq<sp/>=<sp/>this-&gt;seq_;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;seq_++;<sp/></highlight><highlight class="comment">//Increment<sp/>the<sp/>sequence<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.header.frame_id<sp/>=<sp/>this-&gt;frame_id_;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>value<sp/>of<sp/>gamma<sp/>used<sp/>to<sp/>make<sp/>the<sp/>computations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.gamma<sp/>=<sp/>this-&gt;gamma_.value();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>data<sp/>that<sp/>we<sp/>got<sp/>from<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.pd[i]<sp/>=<sp/>pd.value()[i];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.d_pd[i]<sp/>=<sp/>d_pd.value()[i];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.dd_pd[i]<sp/>=<sp/>dd_pd.value()[i];<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.curvature<sp/>=<sp/>curvature.value();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.tangent<sp/>=<sp/>tangent.value();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.derivative_norm<sp/>=<sp/>derivative_norm.value();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.vd<sp/>=<sp/>vd.value();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.d_vd<sp/>=<sp/>d_vd.value();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.vehicle_speed<sp/>=<sp/>vehicle_speed;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.gamma_min<sp/>=<sp/>min_max_gamma_path.first;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.gamma_max<sp/>=<sp/>min_max_gamma_path.second;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publish<sp/>the<sp/>message<sp/>with<sp/>path<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;path_pub_.publish(msg);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>message<sp/>with<sp/>the<sp/>state<sp/>of<sp/>the<sp/>virtual<sp/>target<sp/>and<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>publish<sp/>it<sp/>(to<sp/>be<sp/>seen<sp/>as<sp/>a<sp/>virtual<sp/>vehicle)</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vt_state_msg.Y<sp/>=<sp/>pd.value()[0];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vt_state_msg.X<sp/>=<sp/>pd.value()[1];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vt_state_msg.Z<sp/>=<sp/>pd.value()[2];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vt_state_msg.Yaw<sp/>=<sp/>tangent.value()<sp/>*<sp/>180.0<sp/>/<sp/>M_PI;<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publish<sp/>the<sp/>message<sp/>with<sp/>the<sp/>state<sp/>of<sp/>the<sp/>virtual<sp/>target<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;virtual_target_pub_.publish(vt_state_msg);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::gammaCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Float64<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>current<sp/>gamma<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>this-&gt;gamma_<sp/>=<sp/>msg.data;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathNode::vehicleStateCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>auv_msgs::NavigationStatus<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>vehicle<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_pos_<sp/>&lt;&lt;<sp/><sp/>msg.position.north,<sp/>msg.position.east,<sp/>msg.altitude;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ROS<sp/>set-ups<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;dsor_paths_node&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//node<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>node<sp/>handle;<sp/>need<sp/>to<sp/>pass<sp/>this<sp/>to<sp/>the<sp/>class<sp/>constructor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh_p(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;main:<sp/>instantiating<sp/>an<sp/>object<sp/>of<sp/>type<sp/>PathNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>instantiate<sp/>an<sp/>PathNode<sp/>class<sp/>object<sp/>and<sp/>pass<sp/>in<sp/>pointer<sp/>to<sp/>nodehandle<sp/>for<sp/>constructor<sp/>to<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="classPathNode" kindref="compound">PathNode</ref><sp/>dsorPaths(&amp;nh,&amp;nh_p);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*Added<sp/>to<sp/>work<sp/>with<sp/>timer<sp/>-&gt;<sp/>going<sp/>into<sp/>spin;<sp/>let<sp/>the<sp/>callbacks<sp/>do<sp/>all<sp/>the<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/ros/PathNode.cpp"/>
  </compounddef>
</doxygen>
