<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="innerloops_8cpp" kind="file" language="C++">
    <compoundname>innerloops.cpp</compoundname>
    <includes refid="innerloops_8h" local="yes">innerloops.h</includes>
    <includes local="yes">ros/init.h</includes>
    <incdepgraph>
      <node id="20">
        <label>ros/init.h</label>
      </node>
      <node id="18">
        <label>auv_msgs/BodyForceRequest.h</label>
      </node>
      <node id="4">
        <label>pid_controller.h</label>
        <link refid="pid__controller_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="17">
        <label>inner_loops_pid/ChangeInnerLimits.h</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>auv_msgs/NavigationStatus.h</label>
      </node>
      <node id="1">
        <label>src/ros/innerloops.cpp</label>
        <link refid="innerloops_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>std_msgs/Float64.h</label>
      </node>
      <node id="16">
        <label>inner_loops_pid/ChangeInnerGains.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="10">
        <label>medusa_msgs/mPidDebug.h</label>
      </node>
      <node id="12">
        <label>ros/ros.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>inner_loops_pid/ChangeFFGains.h</label>
      </node>
      <node id="9">
        <label>dsor_utils/filters/lowpass_filter.hpp</label>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>innerloops.h</label>
        <link refid="innerloops_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="3">
        <label>ros_controller.h</label>
        <link refid="ros__controller_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;innerloops.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ros/init.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classInnerloops_1afaf92ad344b0ad1fdaaade563a86b7eb" kindref="member">Innerloops::Innerloops</ref>(ros::NodeHandle<sp/>&amp;nh)<sp/>:<sp/>nh_(nh)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>forces<sp/>bypass<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>forces_hard_bypass_<sp/>=<sp/>nh.param(</highlight><highlight class="stringliteral">&quot;forces_hard_bypass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>timeout<sp/>(references<sp/>will<sp/>be<sp/>ignored<sp/>if<sp/>the<sp/>last<sp/>reference<sp/>received<sp/>is<sp/>this<sp/>time<sp/>old)<sp/>[s]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>timeout_ref_<sp/>=<sp/>nh.param(</highlight><highlight class="stringliteral">&quot;timout_ref&quot;</highlight><highlight class="normal">,<sp/>0.5);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>all<sp/>the<sp/>other<sp/>ROS<sp/>nodes<sp/>and<sp/>services</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><ref refid="classSafeties_1a807230c46ea90e382b5ab1bbfbcb638c" kindref="member">initializeSubscribers</ref>();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classSafeties_1a45b1ee02442a938c60bdfd039ceabce3" kindref="member">initializePublishers</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>initializeServices();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>initializeTimer();</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="classInnerloops_1a6f8ea21a911360a55247c994156a5638" kindref="member">Innerloops::~Innerloops</ref>()<sp/>{<sp/>ros::shutdown();<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Yaw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;yaw&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/yaw&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yaw_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;yaw_,<sp/>&amp;torque_request_[2],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>controllers_.back()-&gt;setCircularUnits(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pitch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;pitch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/pitch&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pitch_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pitch_,<sp/>&amp;torque_request_[1],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>controllers_.back()-&gt;setCircularUnits(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Roll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;roll&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/roll&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;roll_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;roll_,<sp/>&amp;torque_request_[0],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>controllers_.back()-&gt;setCircularUnits(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>rate<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Yaw<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;yaw_rate&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/yaw_rate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yaw_rate_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;yaw_rate_,<sp/>&amp;torque_request_[2],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pitch<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;pitch_rate&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/pitch_rate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pitch_rate_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pitch_rate_,<sp/>&amp;torque_request_[1],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Roll<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;roll_rate&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/roll_rate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;roll_rate_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;roll_rate_,<sp/>&amp;torque_request_[0],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Speed<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Surge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;surge&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/surge&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surge_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;surge_,<sp/>&amp;force_request_[0],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;sway&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/sway&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sway_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;sway_,<sp/>&amp;force_request_[1],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Heave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;heave&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/heave&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;heave_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;heave_,<sp/>&amp;force_request_[2],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Depth<sp/>&amp;<sp/>Altitude<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;depth&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/depth_safety&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;depth_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;depth_,<sp/>&amp;force_request_[2],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Altitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>controllers_.push_back(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRosController" kindref="compound">RosController</ref>(nh_,<sp/></highlight><highlight class="stringliteral">&quot;altitude&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/altitude_safety&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;altitude_ref&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;altitude_,<sp/>&amp;force_request_[2],<sp/>Innerloops::nodeFrequency()));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>controllers_.back()-&gt;setPositiveOutput(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>subscription</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>st_sub_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/state&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/nav/filter/state&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10,<sp/>&amp;Innerloops::StateCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>subscription</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>force_bypass_sub_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/force_bypass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/force_bypass&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10,<sp/>&amp;Innerloops::forceBypassCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::initializeServices()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>change_ff_gains_srv_<sp/>=<sp/>nh_.advertiseService(</highlight><highlight class="stringliteral">&quot;/inner_forces/change_ff_gains&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Innerloops::changeFFGainsService,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>change_gains_srv_<sp/>=<sp/>nh_.advertiseService(</highlight><highlight class="stringliteral">&quot;/inner_forces/change_inner_gains&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Innerloops::changeGainsService,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>change_limits_srv_<sp/>=<sp/>nh_.advertiseService(</highlight><highlight class="stringliteral">&quot;/inner_forces/change_inner_limits&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Innerloops::changeLimitsService,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>forces<sp/>and<sp/>torques</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ft_pub_<sp/>=<sp/>nh_.advertise&lt;auv_msgs::BodyForceRequest&gt;(</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/thrust_body_request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/thrust_body_request&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::initializeTimer()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>Timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>timer_<sp/>=<sp/>nh_.createTimer(ros::Duration(1.0<sp/>/<sp/>Innerloops::nodeFrequency()),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Innerloops::timerCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Innerloops::nodeFrequency()<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>node_frequency<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_,<sp/></highlight><highlight class="stringliteral">&quot;node_frequency&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Node<sp/>will<sp/>run<sp/>at<sp/>:<sp/>%lf<sp/>[hz]&quot;</highlight><highlight class="normal">,<sp/>node_frequency);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::timerCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>force<sp/>and<sp/>torque<sp/>request<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::memset(force_request_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>force_request_);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::memset(torque_request_,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>torque_request_);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>pid<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;RosController<sp/>*&gt;::iterator<sp/>it<sp/>=<sp/>controllers_.begin();<sp/>it<sp/>!=<sp/>controllers_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>(*it)-&gt;computeCommand();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>forces<sp/>and<sp/>torques</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>auv_msgs::BodyForceRequest<sp/>output_msg;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>output_msg.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>output_msg.wrench.force.x<sp/>=<sp/>force_request_[0];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>output_msg.wrench.force.y<sp/>=<sp/>force_request_[1];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>output_msg.wrench.force.z<sp/>=<sp/>force_request_[2];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>output_msg.wrench.torque.x<sp/>=<sp/>torque_request_[0];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>output_msg.wrench.torque.y<sp/>=<sp/>torque_request_[1];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>output_msg.wrench.torque.z<sp/>=<sp/>torque_request_[2];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>last<sp/>manual<sp/>force<sp/>reference<sp/>is<sp/>not<sp/>too<sp/>hold<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ros::Time::now()<sp/>-<sp/>ref_force_bypass_<sp/>&lt;<sp/>ros::Duration(timeout_ref_))<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(forces_hard_bypass_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>soft<sp/>bypass<sp/>-<sp/>sum<sp/>the<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>usefull<sp/>if<sp/>we<sp/>want<sp/>to<sp/>use<sp/>&quot;for<sp/>example&quot;<sp/>the<sp/>surge<sp/>inner-loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>manually<sp/>assign<sp/>an<sp/>external<sp/>force<sp/>to<sp/>control<sp/>the<sp/>torque<sp/>about<sp/>the<sp/>z-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>an<sp/>external<sp/>yaw<sp/>controller<sp/>that<sp/>is<sp/>not<sp/>a<sp/>PID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.x<sp/>+=<sp/>force_bypass_.wrench.force.x;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.y<sp/>+=<sp/>force_bypass_.wrench.force.y;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.z<sp/>+=<sp/>force_bypass_.wrench.force.z;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.x<sp/>+=<sp/>force_bypass_.wrench.torque.x;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.y<sp/>+=<sp/>force_bypass_.wrench.torque.y;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.z<sp/>+=<sp/>force_bypass_.wrench.torque.z;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>hard<sp/>bypass<sp/>-<sp/>ignore<sp/>completely<sp/>the<sp/>inner-loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.x<sp/>=<sp/>force_bypass_.wrench.force.x;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.y<sp/>=<sp/>force_bypass_.wrench.force.y;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.force.z<sp/>=<sp/>force_bypass_.wrench.force.z;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.x<sp/>=<sp/>force_bypass_.wrench.torque.x;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.y<sp/>=<sp/>force_bypass_.wrench.torque.y;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.wrench.torque.z<sp/>=<sp/>force_bypass_.wrench.torque.z;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ft_pub_.publish(output_msg);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::forceBypassCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>auv_msgs::BodyForceRequest<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>ref_force_bypass_<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.force.x<sp/>=<sp/>msg.wrench.force.x;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.force.y<sp/>=<sp/>msg.wrench.force.y;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.force.z<sp/>=<sp/>msg.wrench.force.z;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.torque.x<sp/>=<sp/>msg.wrench.torque.x;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.torque.y<sp/>=<sp/>msg.wrench.torque.y;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>force_bypass_.wrench.torque.z<sp/>=<sp/>msg.wrench.torque.z;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Innerloops::StateCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>auv_msgs::NavigationStatus<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>state<sp/>into<sp/>variables<sp/>to<sp/>be<sp/>used<sp/>separately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>controller<sp/>state<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>roll_<sp/>=<sp/>msg.orientation.x;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>pitch_<sp/>=<sp/>msg.orientation.y;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>yaw_<sp/>=<sp/>msg.orientation.z;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>roll_rate_<sp/>=<sp/>msg.orientation_rate.x;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>pitch_rate_<sp/>=<sp/>msg.orientation_rate.y;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>yaw_rate_<sp/>=<sp/>msg.orientation_rate.z;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>depth_<sp/>=<sp/>msg.position.depth;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>altitude_<sp/>=<sp/>msg.altitude;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>surge_<sp/>=<sp/>msg.body_velocity.x;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>sway_<sp/>=<sp/>msg.body_velocity.y;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>heave_<sp/>=<sp/>msg.body_velocity.z;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>vdepth_<sp/>=<sp/>msg.seafloor_velocity.z;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>valtitude_<sp/>=<sp/>-msg.seafloor_velocity.z;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Innerloops::changeFFGainsService(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeFFGains::Request<sp/>&amp;req,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeFFGains::Response<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>control_changed{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;controller<sp/>:<sp/>controllers_)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((controller-&gt;getControllerName().size()<sp/>==<sp/>req.inner_type.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::equal(req.inner_type.begin(),<sp/>req.inner_type.end(),</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;getControllerName().begin(),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c2)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(c1<sp/>==<sp/>c2<sp/>||<sp/>std::toupper(c1)<sp/>==<sp/>std::toupper(c2));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;setFFGainsPID(req.kff,<sp/>req.kff_d,<sp/>req.kff_lin_drag,<sp/>req.kff_quad_drag);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>control_changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!control_changed)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>control<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>feedfoward<sp/>gains<sp/>are&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Squared<sp/>Proportional<sp/>FF:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kff)<sp/>+</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Derivative<sp/>Proportional<sp/>FF:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kff_d)<sp/>+</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Linear<sp/>Drag<sp/>FF:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kff_lin_drag)<sp/>+</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Quadratic<sp/>Drag<sp/>FF:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kff_quad_drag);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Innerloops::changeGainsService(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeInnerGains::Request<sp/>&amp;req,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeInnerGains::Response<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>control_changed{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;controller<sp/>:<sp/>controllers_)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((controller-&gt;getControllerName().size()<sp/>==<sp/>req.inner_type.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::equal(req.inner_type.begin(),<sp/>req.inner_type.end(),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;getControllerName().begin(),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c2)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(c1<sp/>==<sp/>c2<sp/>||<sp/>std::toupper(c1)<sp/>==<sp/>std::toupper(c2));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;setGainsPID(req.kp,<sp/>req.ki,<sp/>req.kd);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>control_changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!control_changed)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>control<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>gains<sp/>are&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>kp:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kp)<sp/>+</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>ki:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.ki)<sp/>+</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>kd:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.kd);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Innerloops::changeLimitsService(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeInnerLimits::Request<sp/>&amp;req,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_loops_pid::ChangeInnerLimits::Response<sp/>&amp;res)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>control_changed{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;controller<sp/>:<sp/>controllers_)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((controller-&gt;getControllerName().size()<sp/>==<sp/>req.inner_type.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::equal(req.inner_type.begin(),<sp/>req.inner_type.end(),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;getControllerName().begin(),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;c2)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(c1<sp/>==<sp/>c2<sp/>||<sp/>std::toupper(c1)<sp/>==<sp/>std::toupper(c2));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller-&gt;setLimitBoundsPID(req.max_out,<sp/>req.min_out);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>control_changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!control_changed)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>control<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>res.message<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>req.inner_type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>limits<sp/>are&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>max_out:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.max_out)<sp/>+</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>min_out:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(req.min_out);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ros/innerloops.cpp"/>
  </compounddef>
</doxygen>
