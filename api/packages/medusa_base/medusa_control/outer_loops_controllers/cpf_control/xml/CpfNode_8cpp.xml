<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="CpfNode_8cpp" kind="file" language="C++">
    <compoundname>CpfNode.cpp</compoundname>
    <includes refid="CpfNode_8h" local="yes">CpfNode.h</includes>
    <incdepgraph>
      <node id="11">
        <label>medusa_msgs/CPFGamma.h</label>
      </node>
      <node id="1">
        <label>src/ros/CpfNode.cpp</label>
        <link refid="CpfNode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="2">
        <label>CpfNode.h</label>
        <link refid="CpfNode_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cpf_control/ChangeTopology.h</label>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="13">
        <label>std_msgs/Float64.h</label>
      </node>
      <node id="5">
        <label>CPFControl.h</label>
        <link refid="CPFControl_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>EventTriggered.h</label>
        <link refid="EventTriggered_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>dsor_paths/PathData.h</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="15">
        <label>cpf_control/StartStop.h</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="3">
        <label>ros/ros.h</label>
      </node>
      <node id="14">
        <label>std_msgs/String.h</label>
      </node>
      <node id="12">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="CpfNode_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>The main function. THe entry point for this ros node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer with success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/CpfNode.cpp" line="236" column="5" bodyfile="src/ros/CpfNode.cpp" bodystart="236" bodyend="250"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;CpfNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="classCpfNode_1a1b7f752478d2daf72f9c5a1df2955777" kindref="member">CpfNode::CpfNode</ref>(ros::NodeHandle<sp/>*<sp/>nh,<sp/>ros::NodeHandle<sp/>*<sp/>nh_p):nh_(*nh),<sp/>nh_p_(*nh_p)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;in<sp/>class<sp/>constructor<sp/>of<sp/>CpfNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>default<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>this-&gt;cooperative_<sp/>=<sp/>this-&gt;createEventTriggeredControl();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ROS<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>this-&gt;initializeSubscribers();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>this-&gt;initializePublishers();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>this-&gt;initializeServices();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>this-&gt;initializeTimer();</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classCpfNode_1ac34df7e37019f3f4d726563707b2df5d" kindref="member">CpfNode::~CpfNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>this-&gt;external_gamma_sub_.shutdown();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>this-&gt;internal_gamma_sub_.shutdown();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>this-&gt;vc_pub_.shutdown();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>this-&gt;cpf_server_pub_.shutdown();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>cooperative<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;cooperative_)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;cooperative_;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>timer_.stop();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>nh_.shutdown();</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classCPFControl" kindref="compound">CPFControl</ref>*<sp/>CpfNode::createEventTriggeredControl()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>network<sp/>and<sp/>control<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ID;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>adj_matrix;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_epsilon,<sp/>c0,<sp/>c1,<sp/>alpha;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>network<sp/>and<sp/>control<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;ID&quot;</highlight><highlight class="normal">,<sp/>ID);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;adjency_matrix&quot;</highlight><highlight class="normal">,<sp/>adj_matrix);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;gains/event_triggered/c0&quot;</highlight><highlight class="normal">,<sp/>c0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;gains/event_triggered/c1&quot;</highlight><highlight class="normal">,<sp/>c1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;gains/event_triggered/alpha&quot;</highlight><highlight class="normal">,<sp/>alpha);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;gains/event_triggered/k_epsilon&quot;</highlight><highlight class="normal">,<sp/>k_epsilon);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>ID<sp/>in<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>this-&gt;ID_<sp/>=<sp/>ID;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>sqrt<sp/>of<sp/>the<sp/>size<sp/>of<sp/>the<sp/>adjency<sp/>matrix<sp/>to<sp/>check<sp/>if<sp/>it<sp/>is<sp/>square<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_vehicles<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(adj_matrix.size()));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::pow(num_vehicles,<sp/>2)<sp/>!=<sp/>adj_matrix.size())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;The<sp/>adjency<sp/>Matrix<sp/>in<sp/>the<sp/>configuration<sp/>file<sp/>in<sp/>not<sp/>square!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>an<sp/>Eigen<sp/>Matrix<sp/>from<sp/>the<sp/>vector<sp/>that<sp/>contains<sp/>the<sp/>adjency<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>this-&gt;adjency_matrix_.resize(num_vehicles,<sp/>num_vehicles);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_vehicles;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_vehicles;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;adjency_matrix_(i,<sp/>j)<sp/>=<sp/>adj_matrix[(i<sp/>*<sp/>num_vehicles)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>cooperative<sp/>path<sp/>following<sp/>control<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classEventTriggered" kindref="compound">EventTriggered</ref>(this-&gt;adjency_matrix_,<sp/>ID,<sp/>k_epsilon,<sp/>c0,<sp/>c1,<sp/>alpha);<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CpfNode::stop()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>the<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>auxiliary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>this-&gt;gamma_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>this-&gt;vd_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>this-&gt;seq_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>reset<sp/>method<sp/>in<sp/>the<sp/>CPF<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;cooperative_)<sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a406bda171c3ca7a11ca9367819f21688" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>CpfNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::string<sp/>gamma_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/internal_gamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::string<sp/>external_gamma_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/external_gamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>this-&gt;internal_gamma_sub_<sp/>=<sp/>nh_.subscribe(gamma_topic,<sp/>10,<sp/>&amp;CpfNode::internalInfoCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>this-&gt;external_gamma_sub_<sp/>=<sp/>nh_.subscribe(external_gamma_topic,<sp/>10,<sp/>&amp;CpfNode::externalInfoCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>CpfNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>std::string<sp/>vc_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/vc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::string<sp/>cpf_server_input_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/cpf_server_input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>this-&gt;vc_pub_<sp/>=<sp/>nh_.advertise&lt;std_msgs::Float64&gt;(vc_topic,<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>this-&gt;cpf_server_pub_<sp/>=<sp/>nh_.advertise&lt;medusa_msgs::CPFGamma&gt;(cpf_server_input_topic,<sp/>1);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::initializeTimer()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>this-&gt;timer_<sp/>=nh_.createTimer(ros::Duration(1.0<sp/>/<sp/>CpfNode::nodeFrequency()),<sp/>&amp;CpfNode::timerIterCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CpfNode::nodeFrequency()<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>this-&gt;nh_.param(</highlight><highlight class="stringliteral">&quot;node_frequency&quot;</highlight><highlight class="normal">,<sp/>node_frequency,<sp/>2.0);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Node<sp/>will<sp/>run<sp/>at<sp/>:<sp/>%lf<sp/>[hz]&quot;</highlight><highlight class="normal">,<sp/>node_frequency);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::timerIterCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ros::Time::now().toSec();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Run<sp/>the<sp/>coordination<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vc<sp/>=<sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a3b3fe82e9904b76e4ce5a958b4e994e7" kindref="member">coordinationController</ref>(t);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publish<sp/>the<sp/>correction<sp/>factor<sp/>to<sp/>the<sp/>VC<sp/>topic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>std_msgs::Float64<sp/>msg;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>msg.data<sp/>=<sp/>vc;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>this-&gt;vc_pub_.publish(msg);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>time<sp/>to<sp/>publish<sp/>the<sp/>current<sp/>gamma<sp/>to<sp/>the<sp/>vehicle<sp/>network<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pub<sp/>=<sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a144e56d1ae80b050c5861029b96038fe" kindref="member">publishCurrentGamma</ref>(t);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pub)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>publish<sp/>the<sp/>current<sp/>gamma<sp/>to<sp/>the<sp/>network<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>medusa_msgs::CPFGamma<sp/>msg;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.header.seq<sp/>=<sp/>this-&gt;seq_;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;seq_++;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ID<sp/>=<sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a9338bd882af5eece8f5e480f3b2bfd9d" kindref="member">getCurrentVehicleID</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.gamma<sp/>=<sp/>this-&gt;gamma_;<sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.vd<sp/>=<sp/>this-&gt;vd_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cpf_server_pub_.publish(msg);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Callback<sp/>for<sp/>receiving<sp/>the<sp/>external<sp/>vehicle<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::externalInfoCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>medusa_msgs::CPFGamma&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ros::Time::now().toSec();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interpret<sp/>the<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vehicle_ID<sp/>=<sp/>msg.ID;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>msg.gamma;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vd<sp/>=<sp/>msg.vd;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ignore<sp/>an<sp/>external<sp/>message<sp/>that<sp/>contains<sp/>data<sp/>respective<sp/>to<sp/>ou<sp/>vehicle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vehicle_ID<sp/>==<sp/>this-&gt;ID_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>data<sp/>inside<sp/>the<sp/>cooperative<sp/>library<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;cooperative_)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a7cba3d9edc57f3b3b221e1d9e41f33ff" kindref="member">updateVehiclesInformation</ref>(t,<sp/>vehicle_ID,<sp/>gamma,<sp/>vd);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Callback<sp/>for<sp/>receiving<sp/>the<sp/>data<sp/>from<sp/>this<sp/>vehicle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CpfNode::internalInfoCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dsor_paths::PathData<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ros::Time::now().toSec();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>temporary<sp/>varibales<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>this-&gt;gamma_<sp/>=<sp/>msg.gamma;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>this-&gt;vd_<sp/>=<sp/>msg.vd;<sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>data<sp/>inside<sp/>the<sp/>cooperative<sp/>library<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;cooperative_)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cooperative_-&gt;<ref refid="classCPFControl_1a7cba3d9edc57f3b3b221e1d9e41f33ff" kindref="member">updateVehiclesInformation</ref>(t,<sp/>this-&gt;ID_,<sp/>this-&gt;gamma_,<sp/>this-&gt;vd_);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inititate<sp/>the<sp/>node<sp/>and<sp/>the<sp/>node<sp/>handles*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;cpf_node&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh_p(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;main:<sp/>instantiating<sp/>an<sp/>object<sp/>of<sp/>type<sp/>CpfNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Instantiate<sp/>the<sp/>object<sp/>and<sp/>go<sp/>into<sp/>spin.<sp/>Let<sp/>the<sp/>timer<sp/>callback<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="classCpfNode" kindref="compound">CpfNode</ref><sp/>cpfNode(&amp;nh,<sp/>&amp;nh_p);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/ros/CpfNode.cpp"/>
  </compounddef>
</doxygen>
