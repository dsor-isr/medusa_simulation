<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="PathFollowingNode_8cpp" kind="file" language="C++">
    <compoundname>PathFollowingNode.cpp</compoundname>
    <includes refid="PathFollowingNode_8h" local="yes">PathFollowingNode.h</includes>
    <incdepgraph>
      <node id="17">
        <label>limits</label>
      </node>
      <node id="19">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="22">
        <label>Brevik.h</label>
        <link refid="Brevik_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>std_msgs/Bool.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="35">
        <label>dsor_paths/ResetPath.h</label>
      </node>
      <node id="15">
        <label>Eigen/Core</label>
      </node>
      <node id="10">
        <label>auv_msgs/NavigationStatus.h</label>
      </node>
      <node id="29">
        <label>path_following/SetPF.h</label>
      </node>
      <node id="13">
        <label>RelativeHeading.h</label>
        <link refid="RelativeHeading_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Fossen.h</label>
        <link refid="Fossen_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Lapierre.h</label>
        <link refid="Lapierre_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>PathFollowingNode.h</label>
        <link refid="PathFollowingNode_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>waypoint/sendWpType1.h</label>
      </node>
      <node id="8">
        <label>std_msgs/Float64.h</label>
      </node>
      <node id="20">
        <label>Marcelo.h</label>
        <link refid="Marcelo_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>dsor_paths/PathData.h</label>
      </node>
      <node id="18">
        <label>dsor_paths/SetMode.h</label>
      </node>
      <node id="16">
        <label>States.h</label>
        <link refid="States_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/ros/PathFollowingNode.cpp</label>
        <link refid="PathFollowingNode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ros/ros.h</label>
      </node>
      <node id="32">
        <label>path_following/UpdateGainsPF.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="28">
        <label>path_following/ResetVT.h</label>
      </node>
      <node id="12">
        <label>medusa_msgs/mPFollowingDebug.h</label>
      </node>
      <node id="30">
        <label>path_following/StartPF.h</label>
      </node>
      <node id="14">
        <label>PathFollowing.h</label>
        <link refid="PathFollowing_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Romulo.h</label>
        <link refid="Romulo_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>std_srvs/Trigger.h</label>
      </node>
      <node id="27">
        <label>Samson.h</label>
        <link refid="Samson_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Pramod.h</label>
        <link refid="Pramod_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Aguiar.h</label>
        <link refid="Aguiar_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>path_following/StopPF.h</label>
      </node>
      <node id="9">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="PathFollowingNode_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>The main function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/PathFollowingNode.cpp" line="419" column="5" bodyfile="src/ros/PathFollowingNode.cpp" bodystart="419" bodyend="434"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PathFollowingNode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="classPathFollowingNode_1a42425dbdb16c95886d8c61dd38f8892c" kindref="member">PathFollowingNode::PathFollowingNode</ref>(ros::NodeHandle<sp/>*nh,<sp/>ros::NodeHandle<sp/>*nh_p)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>nh_(*nh),<sp/>nh_p_(*nh_p)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;in<sp/>class<sp/>constructor<sp/>of<sp/>PathFollowingNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>this-&gt;initializeSubscribers();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>this-&gt;initializePublishers();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>initializeServices<sp/>is<sp/>implemented<sp/>inside<sp/>PathFollowingServices.cpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>this-&gt;initializeServices();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>this-&gt;initializeTimer();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>default<sp/>Path<sp/>Following<sp/>Algorithm<sp/>-<sp/>Brevik<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_<sp/>=<sp/>getDefaultControllerBrevik();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>pf_algorithm_-&gt;<ref refid="classPathFollowing_1a6ee4ab94a9a42b81eacd550bc89954a8" kindref="member">setPFollowingDebugPublisher</ref>(nh_p_.advertise&lt;medusa_msgs::mPFollowingDebug&gt;(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/pfollowing_debug&quot;</highlight><highlight class="normal">),1));</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classPathFollowingNode_1a8654dd153de14437d5d6ece246f47c5e" kindref="member">PathFollowingNode::~PathFollowingNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>all<sp/>the<sp/>publishers<sp/>and<sp/>deleting<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>PF</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>*<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>this-&gt;deleteCurrentController();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>subscribers<sp/>common<sp/>to<sp/>all<sp/>controllers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>this-&gt;state_sub_.shutdown();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>this-&gt;path_sub_.shutdown();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>this-&gt;vc_sub_.shutdown();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>publishers<sp/>common<sp/>to<sp/>all<sp/>controllers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>this-&gt;flag_pub_.shutdown();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>the<sp/>timer<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shutdown<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>this-&gt;nh_.shutdown();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classPathFollowing" kindref="compound">PathFollowing</ref><sp/>*PathFollowingNode::getDefaultControllerLapierre()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::string<sp/>surge_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/surge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::string<sp/>yaw_rate_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/yaw_rate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>std::string<sp/>rabbit_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/rabbit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>subscribers<sp/>for<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(nh_.advertise&lt;std_msgs::Float64&gt;(surge_topic,<sp/>1));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(yaw_rate_topic,<sp/>1));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(rabbit_topic,<sp/>1));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>gains<sp/>for<sp/>the<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k1,<sp/>k2,<sp/>k3,<sp/>theta,<sp/>k_delta;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/lapierre/k1&quot;</highlight><highlight class="normal">,<sp/>k1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/lapierre/k2&quot;</highlight><highlight class="normal">,<sp/>k2);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/lapierre/k3&quot;</highlight><highlight class="normal">,<sp/>k3);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/lapierre/theta&quot;</highlight><highlight class="normal">,<sp/>theta);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/lapierre/k_delta&quot;</highlight><highlight class="normal">,<sp/>k_delta);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>Path<sp/>Following<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classLapierre" kindref="compound">Lapierre</ref>(k1,<sp/>k2,<sp/>k3,<sp/>theta,<sp/>k_delta,<sp/>this-&gt;publishers_[0],</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;publishers_[1],<sp/>this-&gt;publishers_[2]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="classPathFollowing" kindref="compound">PathFollowing</ref><sp/>*PathFollowingNode::getDefaultControllerBrevik()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::string<sp/>surge_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/surge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>std::string<sp/>yaw_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/yaw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>std::string<sp/>rabbit_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/rabbit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::string<sp/>pfollowing_debug_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/pfollowing_debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>publishers<sp/>for<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(nh_.advertise&lt;std_msgs::Float64&gt;(surge_topic,<sp/>1));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(yaw_topic,<sp/>1));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(rabbit_topic,<sp/>1));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assign<sp/>the<sp/>new<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classBrevik" kindref="compound">Brevik</ref>(this-&gt;publishers_[0],<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;publishers_[1],<sp/>this-&gt;publishers_[2]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="classPathFollowing" kindref="compound">PathFollowing</ref><sp/>*PathFollowingNode::getDefaultControllerAguiar()<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>names<sp/>for<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::string<sp/>surge_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/surge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::string<sp/>yaw_rate_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/yaw_rate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::string<sp/>rabbit_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/rabbit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::string<sp/>pfollowing_debug_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers/pfollowing_debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>publishers<sp/>for<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(nh_.advertise&lt;std_msgs::Float64&gt;(surge_topic,<sp/>1));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(yaw_rate_topic,<sp/>1));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.push_back(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.advertise&lt;std_msgs::Float64&gt;(rabbit_topic,<sp/>1));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta,<sp/>kz;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kk[2];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_pos;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_currents;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>gains<sp/>for<sp/>the<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/delta&quot;</highlight><highlight class="normal">,<sp/>delta);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/kx&quot;</highlight><highlight class="normal">,<sp/>kk[0]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/ky&quot;</highlight><highlight class="normal">,<sp/>kk[1]);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/kz&quot;</highlight><highlight class="normal">,<sp/>kz);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/k_pos&quot;</highlight><highlight class="normal">,<sp/>k_pos);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>nh_p_.getParam(</highlight><highlight class="stringliteral">&quot;controller_gains/aguiar/k_currents&quot;</highlight><highlight class="normal">,<sp/>k_currents);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assign<sp/>the<sp/>new<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classAguiar" kindref="compound">Aguiar</ref>(delta,<sp/>kk,<sp/>kz,<sp/>k_pos,<sp/>k_currents,<sp/>this-&gt;publishers_[0],</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;publishers_[1],<sp/>this-&gt;publishers_[2]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::deleteCurrentController()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>the<sp/>path<sp/>following<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;pf_algorithm_)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;pf_algorithm_;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pf_algorithm_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>publishers<sp/>vector<sp/>used<sp/>by<sp/>the<sp/>current<sp/>path<sp/>following<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;publishers_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;publishers_[i].shutdown();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>subscribers<sp/>vector<sp/>used<sp/>by<sp/>the<sp/>current<sp/>path<sp/>following<sp/>algorithm</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;subscribers_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;subscribers_[i].shutdown();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>the<sp/>list<sp/>of<sp/>publishers<sp/>and<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>this-&gt;publishers_.clear();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>this-&gt;subscribers_.clear();</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>PathFollowingNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>name<sp/>for<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::string<sp/>state_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::string<sp/>path_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::string<sp/>vc_topic<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers/vc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::string<sp/>flag_topic<sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>subscribers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>this-&gt;state_sub_<sp/>=<sp/>nh_.subscribe(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_topic,<sp/>10,<sp/>&amp;PathFollowingNode::vehicleStateCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>this-&gt;path_sub_<sp/>=<sp/>nh_.subscribe(path_topic,<sp/>10,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;PathFollowingNode::pathStateCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>this-&gt;vc_sub_<sp/>=</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.subscribe(vc_topic,<sp/>10,<sp/>&amp;PathFollowingNode::vcCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>this-&gt;flag_sub_<sp/>=</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.subscribe(flag_topic,<sp/>10,<sp/>&amp;PathFollowingNode::flagCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>PathFollowingNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>topic<sp/>name<sp/>for<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::string<sp/>flag_topic<sp/>=</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::string&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>publishers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>this-&gt;flag_pub_<sp/>=<sp/>nh_.advertise&lt;std_msgs::Int8&gt;(flag_topic,<sp/>1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::vcCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Float64<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>desired<sp/>synchronization<sp/>correction<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1a7d34e9ff771e38007ba6670023b7a07b" kindref="member">vc</ref><sp/>=<sp/>msg.data;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::pathStateCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dsor_paths::PathData<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>algorithm<sp/>is<sp/>running,<sp/>signal<sp/>that<sp/>we<sp/>have<sp/>received<sp/>data<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;timer_.hasStarted())<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>has_received_path_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>gamma<sp/>used<sp/>to<sp/>make<sp/>the<sp/>computations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1a1e992cf1c999aed758c00ec35a9fe64d" kindref="member">gamma</ref><sp/>=<sp/>msg.gamma;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>path<sp/>position,<sp/>derivative<sp/>and<sp/>second<sp/>derivative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1adcfbbc5c2c5ce15fe7a0c55fe0d2017a" kindref="member">pd</ref><sp/>&lt;&lt;<sp/>msg.pd[0],<sp/>msg.pd[1],<sp/>msg.pd[2];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.d_pd<sp/>&lt;&lt;<sp/>msg.d_pd[0],<sp/>msg.d_pd[1],<sp/>msg.d_pd[2];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.dd_pd<sp/>&lt;&lt;<sp/>msg.dd_pd[0],<sp/>msg.dd_pd[1],<sp/>msg.dd_pd[2];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>angle<sp/>of<sp/>the<sp/>tangent<sp/>to<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1a99dec562a5ae212941c0854b5f9d65cd" kindref="member">psi</ref><sp/>=<sp/>msg.tangent;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.curvature<sp/>=<sp/>msg.curvature;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.tangent_norm<sp/>=<sp/>msg.derivative_norm;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>desired<sp/>velocity<sp/>is<sp/>the<sp/>combination<sp/>of<sp/>the<sp/>path<sp/>speed<sp/>+<sp/>coordination</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>*<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1a89cb893328d1d2efb4fd10e308f053e8" kindref="member">vd</ref><sp/>=<sp/>msg.vd;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.d_vd<sp/>=<sp/>msg.d_vd;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.vehicle_speed<sp/>=<sp/>msg.vehicle_speed;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>path<sp/>following<sp/>path<sp/>parameter<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.<ref refid="structPathState_1af6702806427eaa044dc11a90bcc3869c" kindref="member">gamma_min</ref><sp/>=<sp/>msg.gamma_min;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>this-&gt;path_state_.gamma_max<sp/>=<sp/>msg.gamma_max;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::vehicleStateCallback(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>auv_msgs::NavigationStatus<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>algorithm<sp/>is<sp/>running,<sp/>signal<sp/>that<sp/>we<sp/>have<sp/>received<sp/>data<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/>*<sp/>vehicle<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;timer_.hasStarted())<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>has_received_vehicle_state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>vehicle<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_state_.<ref refid="structVehicleState_1a860f94c45b775dbd8cbf90e274489cb4" kindref="member">eta1</ref><sp/>&lt;&lt;<sp/>msg.position.north,<sp/>msg.position.east,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.altitude;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>vehicle<sp/>orientation<sp/>(converting<sp/>from<sp/>deg<sp/>to<sp/>rad)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll<sp/>=<sp/>MedusaGimmicks::wrap2pi(msg.orientation.x<sp/>*<sp/>M_PI<sp/>/<sp/>180,<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch<sp/>=<sp/>MedusaGimmicks::wrap2pi(msg.orientation.y<sp/>*<sp/>M_PI<sp/>/<sp/>180,<sp/>1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>MedusaGimmicks::wrap2pi(msg.orientation.z<sp/>*<sp/>M_PI<sp/>/<sp/>180,<sp/>1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_state_.eta2<sp/>&lt;&lt;<sp/>roll,<sp/>pitch,<sp/>yaw;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>vehicle<sp/>linear<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_state_.<ref refid="structVehicleState_1ac9730df9dd6e068de2e031d5da4a2c9b" kindref="member">v1</ref><sp/>&lt;&lt;<sp/>msg.body_velocity.x,<sp/>msg.body_velocity.y,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.body_velocity.z;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>vehicle<sp/>angular<sp/>velocity<sp/>(converting<sp/>from<sp/>deg<sp/>to<sp/>rad)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>this-&gt;vehicle_state_.v2<sp/>&lt;&lt;<sp/>msg.orientation_rate.x<sp/>*<sp/>M_PI<sp/>/<sp/>180,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.orientation_rate.y<sp/>*<sp/>M_PI<sp/>/<sp/>180,<sp/>msg.orientation_rate.z<sp/>*<sp/>M_PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::initializeTimer()<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>this-&gt;timer_<sp/>=</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_.createTimer(ros::Duration(1.0<sp/>/<sp/>PathFollowingNode::nodeFrequency()),</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;PathFollowingNode::timerIterCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>the<sp/>start<sp/>service<sp/>to<sp/>start<sp/>the<sp/>Path<sp/>Following<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PathFollowingNode::nodeFrequency()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_frequency<sp/>=</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;double&gt;(this-&gt;nh_p_,<sp/></highlight><highlight class="stringliteral">&quot;node_frequency&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Node<sp/>will<sp/>run<sp/>at<sp/>:<sp/>%lf<sp/>[hz]&quot;</highlight><highlight class="normal">,<sp/>node_frequency);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::timerIterCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>it<sp/>has<sp/>not<sp/>received<sp/>data<sp/>from<sp/>the<sp/>path<sp/>or<sp/>the<sp/>vehicle,<sp/>do<sp/>not<sp/>update<sp/>the</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/>*<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;has_received_path_state<sp/>||<sp/>!this-&gt;has_received_vehicle_state)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>values<sp/>inside<sp/>the<sp/>PathFollowing<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1a00f71ae3ea5e4997037849caab6b49c9" kindref="member">UpdateVehicleState</ref>(this-&gt;vehicle_state_);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1aaa12dbafa972045c2c2c1fc9d871d2f7" kindref="member">UpdatePathState</ref>(this-&gt;path_state_);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>difference<sp/>between<sp/>previous<sp/>update<sp/>time<sp/>and<sp/>current<sp/>update<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ros::Time<sp/>curr_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>ros::Duration<sp/>dt<sp/>=<sp/>curr_time<sp/>-<sp/>this-&gt;prev_time_;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>this-&gt;prev_time_<sp/>=<sp/>curr_time;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>control<sp/>law<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1a86a30b18ed168ea903dfd0264fe4b5d1" kindref="member">callPFController</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(dt.toSec()));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Publish<sp/>the<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1a5a23d424af178c88cd97fb3e68f45841" kindref="member">publish</ref>();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>reached<sp/>the<sp/>end<sp/>of<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1a8ec7c82e205a82a1e2f3b0d895d702ba" kindref="member">stop</ref>())<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ask<sp/>waypoint<sp/>algorithm<sp/>to<sp/>hold<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sendWaypoint(WP_FINISH);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>DR<sp/>postion<sp/>to<sp/>the<sp/>2d<sp/>state<sp/>filter<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sendResetDeadReckoning();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::sendWaypoint(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>waypoint::sendWpType1<sp/>srv;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>srv.request.x<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>srv.request.y<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>wp_standard_client_.call(srv);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::sendResetDeadReckoning()<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>std_srvs::Trigger<sp/>srv;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>dr_reset_client_.call(srv);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::stopAlgorithm()<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inform<sp/>the<sp/>user<sp/>that<sp/>path<sp/>following<sp/>will<sp/>stop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Path<sp/>Following<sp/>Node<sp/>has<sp/>stop.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>the<sp/>timer<sp/>callback<sp/>where<sp/>the<sp/>pf<sp/>algorithm<sp/>is<sp/>invoked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>this-&gt;timer_.stop();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>Path<sp/>following<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>this-&gt;pf_algorithm_-&gt;<ref refid="classPathFollowing_1a05b2c36ff066b2eec99cbdd0c10a0dfe" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>flags<sp/>used<sp/>in<sp/>the<sp/>first<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>this-&gt;has_received_vehicle_state<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>this-&gt;has_received_path_state<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>service<sp/>to<sp/>reset<sp/>the<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>dsor_paths::ResetPath<sp/>srv;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>srv.request.reset_path<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>reset_path_client_.call(srv);</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathFollowingNode::flagCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Int8<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>flag<sp/>changed<sp/>and<sp/>the<sp/>path<sp/>following<sp/>was<sp/>running,<sp/>then<sp/>stop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.data<sp/>!=<sp/>FLAG_PF<sp/>&amp;&amp;<sp/>this-&gt;timer_.hasStarted())<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;stopAlgorithm();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;path_following_node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh_p(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;main:<sp/>instantiating<sp/>an<sp/>object<sp/>of<sp/>type<sp/>PathFollowingNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Instantiate<sp/>the<sp/>PathFollowing<sp/>Node*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><ref refid="classPathFollowingNode" kindref="compound">PathFollowingNode</ref><sp/><ref refid="classPathFollowing" kindref="compound">PathFollowing</ref>(&amp;nh,<sp/>&amp;nh_p);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Going<sp/>into<sp/>spin<sp/>and<sp/>let<sp/>the<sp/>timer<sp/>callback<sp/>do<sp/>all<sp/>the<sp/>work<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ros/PathFollowingNode.cpp"/>
  </compounddef>
</doxygen>
