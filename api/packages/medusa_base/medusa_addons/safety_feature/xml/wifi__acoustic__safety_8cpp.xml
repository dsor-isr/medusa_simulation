<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="wifi__acoustic__safety_8cpp" kind="file" language="C++">
    <compoundname>wifi_acoustic_safety.cpp</compoundname>
    <includes local="no">ros/ros.h</includes>
    <includes local="no">std_msgs/Int8.h</includes>
    <includes local="no">std_msgs/Int32.h</includes>
    <includes local="no">std_msgs/UInt8.h</includes>
    <includes local="no">std_msgs/Bool.h</includes>
    <includes local="no">std_msgs/String.h</includes>
    <includes local="no">medusa_msgs/mUSBLFix.h</includes>
    <includes local="no">nav_msgs/Odometry.h</includes>
    <includes local="no">medusa_msgs/mState.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">sys/socket.h</includes>
    <incdepgraph>
      <node id="15">
        <label>netinet/in.h</label>
      </node>
      <node id="14">
        <label>arpa/inet.h</label>
      </node>
      <node id="4">
        <label>std_msgs/Int32.h</label>
      </node>
      <node id="6">
        <label>std_msgs/Bool.h</label>
      </node>
      <node id="9">
        <label>nav_msgs/Odometry.h</label>
      </node>
      <node id="13">
        <label>netdb.h</label>
      </node>
      <node id="12">
        <label>sys/types.h</label>
      </node>
      <node id="11">
        <label>signal.h</label>
      </node>
      <node id="10">
        <label>medusa_msgs/mState.h</label>
      </node>
      <node id="2">
        <label>ros/ros.h</label>
      </node>
      <node id="7">
        <label>std_msgs/String.h</label>
      </node>
      <node id="5">
        <label>std_msgs/UInt8.h</label>
      </node>
      <node id="16">
        <label>sys/socket.h</label>
      </node>
      <node id="8">
        <label>medusa_msgs/mUSBLFix.h</label>
      </node>
      <node id="1">
        <label>src/wifi_acoustic_safety.cpp</label>
        <link refid="wifi__acoustic__safety_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1ad3ea63510e9013bd2cf450b74efbce9e" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double RATE</definition>
        <argsstring></argsstring>
        <name>RATE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="19" column="8" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a9664c8a0bc2b679c3b4758d83b7dde28" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double watchdog_time</definition>
        <argsstring></argsstring>
        <name>watchdog_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="19" column="13" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1aa9ffc30a503142039fb0e409170004f9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double wifi_timeout</definition>
        <argsstring></argsstring>
        <name>wifi_timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="19" column="27" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1aeb69578d78867400381f1c339a751ef9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double lastDepth</definition>
        <argsstring></argsstring>
        <name>lastDepth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="19" column="40" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1ae6047baddd47ffa61caa800a8fc22200" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string surface_vehicle</definition>
        <argsstring></argsstring>
        <name>surface_vehicle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="20" column="13" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a3eb027cdfda48db01fd652b6faa0b2b3" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string vehicle_name</definition>
        <argsstring></argsstring>
        <name>vehicle_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="20" column="29" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a282cd0a1b76cbff87edcb2c9187dc848" prot="public" static="no" mutable="no">
        <type>std_msgs::String</type>
        <definition>std_msgs::String lastRoles</definition>
        <argsstring></argsstring>
        <name>lastRoles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="21" column="18" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a034f45de4823a42d3e9556615c3dbc58" prot="public" static="no" mutable="no">
        <type>ros::Time</type>
        <definition>ros::Time lastping</definition>
        <argsstring></argsstring>
        <name>lastping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="22" column="11" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a363556b0e7a51bfc28e5be45519a909c" prot="public" static="no" mutable="no">
        <type>ros::Time</type>
        <definition>ros::Time lastRoles_time</definition>
        <argsstring></argsstring>
        <name>lastRoles_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="22" column="20" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a429073b3109f0ba838d8821e6476d7eb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool acoustic_abort</definition>
        <argsstring></argsstring>
        <name>acoustic_abort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="24" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a15665854e91264f31f047af3958dfc84" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int id_sck</definition>
        <argsstring></argsstring>
        <name>id_sck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="26" column="5" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a6b2d9126b78342424490e063f4a4c626" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int sckClient</definition>
        <argsstring></argsstring>
        <name>sckClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="26" column="12" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a61644cce33b779a1c3822d37fb54a164" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int SAFETY_PORT</definition>
        <argsstring></argsstring>
        <name>SAFETY_PORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="26" column="22" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a4a150884e4ea36350f1bf057db3bd841" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Client</definition>
        <argsstring></argsstring>
        <name>Client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="27" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1acbb2daa3537b8ecc8eb4fca0d9ba5e74" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool RELAY_WIFI</definition>
        <argsstring></argsstring>
        <name>RELAY_WIFI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="27" column="13" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1ae688ce221de0de53500e130618d12b75" prot="public" static="no" mutable="no">
        <type>fd_set</type>
        <definition>fd_set master</definition>
        <argsstring></argsstring>
        <name>master</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="30" column="8" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a19238a6905e03f2baf05c0d43f6b4188" prot="public" static="no" mutable="no">
        <type>fd_set</type>
        <definition>fd_set read_fds</definition>
        <argsstring></argsstring>
        <name>read_fds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="31" column="8" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a582ad83322acbc5ec4bad57b78cb6d8d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int fdmax</definition>
        <argsstring></argsstring>
        <name>fdmax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="32" column="5" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="wifi__acoustic__safety_8cpp_1a6dd19d5f3c4d95cf681ec6cfefc08371" prot="public" static="no" mutable="no">
        <type>sig_atomic_t volatile</type>
        <definition>sig_atomic_t volatile g_request_shutdown</definition>
        <argsstring></argsstring>
        <name>g_request_shutdown</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="35" column="23" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a2a87f4f076fc161032610fb88d54e75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mySigIntHandler</definition>
        <argsstring>(int sig)</argsstring>
        <name>mySigIntHandler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>replacement SIGINT handler </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="42" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a5b16408c97b92243fbc622a49f720ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MakeServer</definition>
        <argsstring>(int port)</argsstring>
        <name>MakeServer</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Creates a TCP server with a specified port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP port </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int &gt;0 open port with success. Otherwise failed to open port </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="56" column="5" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="56" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a31d080f16dca3eae2198ced2bb4279b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AcceptClient</definition>
        <argsstring>(int sockfd)</argsstring>
        <name>AcceptClient</name>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <briefdescription>
<para>Accepts any client that trys to connect. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="99" column="5" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="99" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1aec381dd07bcce6bb337ec4c4b28dd72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ReadACK</definition>
        <argsstring>(int sck)</argsstring>
        <name>ReadACK</name>
        <param>
          <type>int</type>
          <declname>sck</declname>
        </param>
        <briefdescription>
<para>Reads the message and verifies if it comes correctly or not Waits for 1 second to receive this message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sck</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="142" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="142" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a975c95cc68167f0a7ceb83be7eaddb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_Callback</definition>
        <argsstring>(medusa_msgs::mUSBLFix const aux)</argsstring>
        <name>range_Callback</name>
        <param>
          <type>medusa_msgs::mUSBLFix const</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Range acoustic callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="184" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a11e0dce807777bdd5cdabfe82b77bfff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ownOdomCallback</definition>
        <argsstring>(const medusa_msgs::mState &amp;ptr)</argsstring>
        <name>ownOdomCallback</name>
        <param>
          <type>const medusa_msgs::mState &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Save the depth to validate if the vehicle is underwater. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="198" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a86c3098f0beb19e1fec0dabb50dcad02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void safetyabort_Callback</definition>
        <argsstring>(const std_msgs::UInt8 &amp;ptr)</argsstring>
        <name>safetyabort_Callback</name>
        <param>
          <type>const std_msgs::UInt8 &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Check the acoustic abort signal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="208" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a68e2667feeef1d615a564c4c44d68dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void surfacename_Callback</definition>
        <argsstring>(const ros::MessageEvent&lt; std_msgs::String const &gt; &amp;event)</argsstring>
        <name>surfacename_Callback</name>
        <param>
          <type>const ros::MessageEvent&lt; std_msgs::String const &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Defines which vehicle is at surface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="220" column="6" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="220" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="wifi__acoustic__safety_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wifi_acoustic_safety.cpp" line="237" column="5" bodyfile="src/wifi_acoustic_safety.cpp" bodystart="237" bodyend="425"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;ros/ros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/Int8.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/Int32.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/UInt8.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/Bool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;std_msgs/String.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;medusa_msgs/mUSBLFix.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nav_msgs/Odometry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;medusa_msgs/mState.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*INCLUDE<sp/>SOCKET<sp/>HEADERS*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RATE,<sp/>watchdog_time,<sp/>wifi_timeout,<sp/>lastDepth;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">std::string<sp/>surface_vehicle,<sp/>vehicle_name;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std_msgs::String<sp/>lastRoles;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">ros::Time<sp/>lastping,<sp/>lastRoles_time;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acoustic_abort;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_sck,<sp/>sckClient,<sp/>SAFETY_PORT;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Client,<sp/>RELAY_WIFI;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non<sp/>blocking<sp/>accept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">fd_set<sp/>master;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">fd_set<sp/>read_fds;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdmax;</highlight><highlight class="comment">/*<sp/>maximum<sp/>file<sp/>descriptor<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signal-safe<sp/>flag<sp/>for<sp/>whether<sp/>shutdown<sp/>is<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">sig_atomic_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>g_request_shutdown<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mySigIntHandler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Shutdown<sp/>Signal<sp/>received!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>g_request_shutdown<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>close(sckClient);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MakeServer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sck;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>master<sp/>and<sp/>temp<sp/>sets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>FD_ZERO(&amp;master);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>FD_ZERO(&amp;read_fds);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>si_me;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sck=socket(AF_INET,SOCK_STREAM,0))&lt;0){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Creating<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>optval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>reuse<sp/>the<sp/>socket<sp/>event<sp/>if<sp/>it<sp/>is<sp/>binded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>setsockopt(sck,<sp/>SOL_SOCKET,<sp/>SO_REUSEADDR,<sp/>&amp;optval,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>optval);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>memset((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;si_me,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(si_me));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>si_me.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>si_me.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>si_me.sin_addr.s_addr<sp/>=<sp/>htonl(INADDR_ANY);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bind(sck,(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;si_me,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(si_me))==-1){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Port<sp/>already<sp/>in<sp/>use&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>socket<sp/>waits<sp/>for<sp/>a<sp/>connection*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>listen(sck,1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>the<sp/>listener<sp/>to<sp/>the<sp/>master<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>FD_SET(sck,<sp/>&amp;master);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>biggest<sp/>file<sp/>descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>fdmax<sp/>=<sp/>sck;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sck;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AcceptClient(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sockfd){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>cli_addr;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>newsockfd,<sp/>clilen;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>clilen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cli_addr);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>read_fds<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tv<sp/>=<sp/>{2,<sp/>0};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sleep<sp/>for<sp/>2.0s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(select(fdmax+1,<sp/>&amp;read_fds,<sp/>NULL,<sp/>NULL,<sp/>&amp;tv)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Server-select()<sp/>error!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FD_ISSET(fdmax,<sp/>&amp;read_fds)){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>newsockfd<sp/>=<sp/>accept(sockfd,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;cli_addr,<sp/>(socklen_t<sp/>*)<sp/>&amp;clilen);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsockfd<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errno<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;SIGINT<sp/>recieved<sp/>in<sp/>accept\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ros::shutdown();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Accepting<sp/>a<sp/>Client&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newsockfd;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>Reads<sp/>the<sp/>message<sp/>and<sp/>verifies<sp/>if<sp/>it<sp/>comes<sp/>correctly<sp/>or<sp/>not</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>Waits<sp/>for<sp/>1<sp/>second<sp/>to<sp/>receive<sp/>this<sp/>message</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReadACK(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sck){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>fd_set<sp/>readfds;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv,n,<sp/>dim;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tvselect;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ACK[3];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>1<sp/>second<sp/>to<sp/>receive<sp/>the<sp/>ACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>tvselect.tv_sec=1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>tvselect.tv_usec=0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>FD_ZERO(&amp;readfds);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>FD_SET(sck,<sp/><sp/>&amp;readfds);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>sck<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>rv<sp/>=<sp/>select(n,<sp/>&amp;readfds,<sp/>NULL,<sp/>NULL,<sp/>&amp;tvselect);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>-1){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;select<sp/>reading<sp/>data<sp/>port&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*error<sp/>occurred<sp/>in<sp/>select()*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Timeout<sp/>occurred!<sp/>No<sp/>ACK<sp/>in<sp/>1<sp/>second.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FD_ISSET(sck,<sp/>&amp;readfds))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>dim=read(sck,<sp/>ACK,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==0){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Connection<sp/>with<sp/>shore<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>Client=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ACK[0]!=1){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>ACK<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>range_Callback(medusa_msgs::mUSBLFix<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aux){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>a<sp/>range<sp/>between<sp/>me<sp/>and<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aux.type==aux.AZIMUTH_ONLY<sp/>||<sp/>aux.source_name.compare(surface_vehicle)!=0)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>header<sp/>stamp<sp/>could<sp/>correspond<sp/>to<sp/>old<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>lastping<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ownOdomCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>medusa_msgs::mState&amp;<sp/>ptr){</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//lastDepth=ptr.pose.pose.position.z;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>lastDepth=ptr.Depth;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>safetyabort_Callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::UInt8&amp;<sp/>ptr){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr.data!=0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>acoustic_abort<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>acoustic_abort<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>surfacename_Callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::MessageEvent&lt;std_msgs::String<sp/>const&gt;&amp;<sp/>event){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>lastRoles=*(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.getMessage());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>lastRoles_time<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.getReceiptTime();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>roles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*std::stringstream<sp/>ss(lastRoles.data);</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>std::getline(ss,ownrole,&apos;,&apos;);</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>if(ownrole.empty())<sp/>ROS_ERROR(&quot;No<sp/>parameter<sp/>ownrole<sp/>was<sp/>published&quot;);</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>std::getline(ss,surfacerole,&apos;,&apos;);</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>if(surfacerole.empty())<sp/>ROS_ERROR(&quot;No<sp/>parameter<sp/>surfacerole<sp/>was<sp/>published&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Medusa<sp/>Architecture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastRoles.data.empty())<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>parameter<sp/>surface<sp/>vehicle<sp/>was<sp/>published&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>surface_vehicle<sp/>=<sp/>lastRoles.data;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;Acoustic_Safety_Feature&quot;</highlight><highlight class="normal">,<sp/>ros::init_options::NoSigintHandler);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>signal(SIGINT,<sp/>mySigIntHandler);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh,<sp/>nh_l(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;SAFETY_PORT&quot;</highlight><highlight class="normal">,<sp/>SAFETY_PORT))<sp/>{<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>Parameter:<sp/>SAFETY_PORT&quot;</highlight><highlight class="normal">);<sp/>ros::shutdown();<sp/>exit(-1);}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;RATE&quot;</highlight><highlight class="normal">,<sp/>RATE))<sp/>{<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>Parameter:<sp/>RATE&quot;</highlight><highlight class="normal">);<sp/>ros::shutdown();<sp/>exit(-1);}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>vehicle_name))<sp/>{<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>Parameter:<sp/>name&quot;</highlight><highlight class="normal">);<sp/>ros::shutdown();<sp/>exit(-1);}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Surface<sp/>Vehicle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;surface_vehicle&quot;</highlight><highlight class="normal">,<sp/>surface_vehicle))</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>surface_vehicle.clear();</highlight><highlight class="comment">//<sp/>clear<sp/>surface_name<sp/>wait<sp/>for<sp/>topic<sp/>surfacerole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;/vehicle/safety_features/acoustic_timeout&quot;</highlight><highlight class="normal">,<sp/>watchdog_time))<sp/>{<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>Parameter:<sp/>acoustic_timeout&quot;</highlight><highlight class="normal">);<sp/>ros::shutdown();<sp/>exit(-1);}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nh_l.getParamCached(</highlight><highlight class="stringliteral">&quot;/vehicle/safety_features/wifi_timeout&quot;</highlight><highlight class="normal">,<sp/>wifi_timeout))<sp/>{<sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>Parameter:<sp/>wifi_timeout&quot;</highlight><highlight class="normal">);<sp/>ros::shutdown();<sp/>exit(-1);}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/>safety_pub<sp/>=<sp/>nh.advertise&lt;std_msgs::Int8&gt;(</highlight><highlight class="stringliteral">&quot;/Safety_Feature&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>sub_ownstate<sp/>=<sp/>nh.subscribe(</highlight><highlight class="stringliteral">&quot;/State&quot;</highlight><highlight class="normal">,<sp/>10,ownOdomCallback);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>sub_range<sp/>=<sp/>nh.subscribe(</highlight><highlight class="stringliteral">&quot;/sensors/usbl_fix&quot;</highlight><highlight class="normal">,<sp/>10,<sp/>range_Callback);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>sub_roles<sp/>=<sp/>nh_l.subscribe(</highlight><highlight class="stringliteral">&quot;surface_vehicle&quot;</highlight><highlight class="normal">,<sp/>10,surfacename_Callback);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/><sp/>stop_pub<sp/>=<sp/>nh.advertise&lt;std_msgs::Int8&gt;(</highlight><highlight class="stringliteral">&quot;/Thruster_Stop&quot;</highlight><highlight class="normal">,<sp/>1000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>Thrusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>sub_safety_abort<sp/>=<sp/>nh.subscribe(</highlight><highlight class="stringliteral">&quot;comms/safety_abort&quot;</highlight><highlight class="normal">,<sp/>10,safetyabort_Callback);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/><sp/>safety_abort<sp/>=<sp/>nh.advertise&lt;std_msgs::UInt8&gt;(</highlight><highlight class="stringliteral">&quot;/safety_abort&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>ros::Publisher<sp/>flag_pub<sp/>=<sp/>nh.advertise&lt;std_msgs::Int8&gt;(</highlight><highlight class="stringliteral">&quot;/Flag&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((id_sck=MakeServer(SAFETY_PORT))&lt;=0){</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Creating<sp/>Server.<sp/>Trying<sp/>one<sp/>more<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(100000);</highlight><highlight class="comment">//<sp/>Waiting<sp/>100ms<sp/>to<sp/>try<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((id_sck=MakeServer(SAFETY_PORT))&lt;=0){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Creating<sp/>Server<sp/>after<sp/>two<sp/>tries.<sp/>Shutting<sp/>down<sp/>the<sp/>process.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::shutdown();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>RELAY_WIFI<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>ros::Rate<sp/>loop_rate(2.0);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std_msgs::Int8<sp/>aux;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>aux.data=1;<sp/>safety_pub.publish(aux);<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>Activating<sp/>the<sp/>Safety_Feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>acoustic_abort<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>ros::Time<sp/>t_old<sp/>=ros::Time::now()<sp/>-<sp/>ros::Duration(1/RATE+1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ros::Time<sp/>t_last_wifi_ping<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>lastRoles_time<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nosafety_pub=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Starting<sp/>Safety<sp/>Feature<sp/>Loop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!g_request_shutdown<sp/>&amp;&amp;<sp/>ros::ok())<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>loop_rate.sleep();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::spinOnce();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::Time<sp/>tnow<sp/>=ros::Time::now();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>a<sp/>surface<sp/>vehicle<sp/>to<sp/>relay<sp/>acoustic<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!surface_vehicle.empty()<sp/><sp/>&amp;&amp;<sp/>surface_vehicle.compare(vehicle_name)==0)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RELAY_WIFI<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>vehicle<sp/>is<sp/>underwater<sp/>to<sp/>start<sp/>publishing<sp/>safety<sp/>feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>should<sp/>beleive<sp/>on<sp/>acoustics<sp/>(roles<sp/>have<sp/>been<sp/>published)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastDepth&gt;=0.3<sp/>&amp;&amp;<sp/>(tnow-lastRoles_time).toSec()&lt;5.0){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abort<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(acoustic_abort){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR_THROTTLE(10.0,</highlight><highlight class="stringliteral">&quot;Acoustic<sp/>abort<sp/>signal<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>did<sp/>not<sp/>receive<sp/>a<sp/>ping<sp/>for<sp/>a<sp/>long<sp/>time<sp/>-&gt;<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Time<sp/>diff<sp/>from<sp/>the<sp/>last<sp/>ping<sp/>%.2f&quot;</highlight><highlight class="normal">,round((tnow-lastping).toSec()*10)/10);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((tnow-lastping).toSec()&gt;watchdog_time<sp/>||<sp/>acoustic_abort){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!acoustic_abort)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR_THROTTLE(10,</highlight><highlight class="stringliteral">&quot;No<sp/>ranges<sp/>between<sp/>me<sp/>and<sp/>%s<sp/>for<sp/>a<sp/>period<sp/>greater<sp/>than<sp/>%.1f.<sp/>Aborting<sp/>vehicle!&quot;</highlight><highlight class="normal">,surface_vehicle.c_str(),<sp/>watchdog_time);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=1;<sp/>safety_pub.publish(aux);<sp/></highlight><highlight class="comment">//<sp/>Activate<sp/>Safety_Feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stop_pub.publish(aux);<sp/>//<sp/>Stop<sp/>Thrusters,<sp/>it<sp/>needs<sp/>reactivation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abort<sp/>Mission<sp/>-&gt;<sp/>Flag<sp/>to<sp/>Idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::Int8<sp/>flag_idle;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_idle.data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_pub.publish(flag_idle);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>safety<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::UInt8<sp/>acoustic_msg;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acoustic_msg.data<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safety_abort.publish(acoustic_msg);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=0;<sp/>safety_pub.publish(aux);<sp/></highlight><highlight class="comment">//<sp/>Ranges<sp/>are<sp/>comming<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nosafety_pub<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updating<sp/>the<sp/>(virtual)<sp/>last<sp/>ping<sp/>at<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastping<sp/>=<sp/>tnow;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((round((tnow-t_old).toSec()*10)/10&gt;=(1.0/RATE))<sp/>&amp;&amp;<sp/>Client){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO(&quot;Time<sp/>since<sp/>last<sp/>ping<sp/>%.1f&quot;,(tnow-t_old).toSec());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Ack[2];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_old=tnow;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ack[0]=1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>an<sp/>ACK<sp/>in<sp/>the<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((write(sckClient,<sp/>Ack,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)))&lt;=0){</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Connection<sp/>with<sp/>shore<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(100000);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>the<sp/>ack<sp/>from<sp/>the<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ReadACK(sckClient)){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connection<sp/>was<sp/>closed<sp/>by<sp/>the<sp/>other<sp/>peer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!Client){</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wifi<sp/>Ping<sp/>Timeout<sp/>has<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((tnow-t_last_wifi_ping).toSec()&gt;=wifi_timeout){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;%.1fs<sp/>without<sp/>pings<sp/>from<sp/>shore.<sp/>Shutting<sp/>down<sp/>the<sp/>Thrusters&quot;</highlight><highlight class="normal">,<sp/>(tnow-t_last_wifi_ping).toSec());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(sckClient);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=1;<sp/>safety_pub.publish(aux);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(&quot;Error<sp/>receiving<sp/>ACK.<sp/>Let&apos;s<sp/>try<sp/>again&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>One<sp/>more<sp/>try<sp/>to<sp/>send<sp/>an<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!Client<sp/>||<sp/>(write(sckClient,<sp/>Ack,<sp/>sizeof(unsigned<sp/>char)))&lt;=0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client=false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN(&quot;Connection<sp/>closed&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(100000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!Client<sp/>||<sp/>!ReadACK(sckClient)){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(&quot;Error<sp/>in<sp/>the<sp/>second<sp/>try.<sp/>Shutting<sp/>down<sp/>the<sp/>Thrusters\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(sckClient);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=1;<sp/>safety_pub.publish(aux);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_last_wifi_ping<sp/>=<sp/>tnow;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=0;<sp/>safety_pub.publish(aux);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nosafety_pub<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Client){</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>between<sp/>pings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=0;<sp/>safety_pub.publish(aux);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nosafety_pub<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR_DELAYED_THROTTLE(45.0,</highlight><highlight class="stringliteral">&quot;No<sp/>Safety<sp/>Client,<sp/>setting<sp/>Thrusters<sp/>to<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nosafety_pub){</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux.data=1;<sp/>safety_pub.publish(aux);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nosafety_pub<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>vehicle<sp/>is<sp/>the<sp/>communications<sp/>relay<sp/>abort<sp/>all<sp/>the<sp/>underwater<sp/>vehicles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RELAY_WIFI){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR_DELAYED_THROTTLE(5.0,</highlight><highlight class="stringliteral">&quot;Sending<sp/>an<sp/>acoustic<sp/>abort<sp/>and<sp/>abort<sp/>Mission!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::UInt8<sp/>acoustic_msg;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acoustic_msg.data<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safety_abort.publish(acoustic_msg);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abort<sp/>Mission<sp/>-&gt;<sp/>Flag<sp/>to<sp/>Idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::Int8<sp/>flag_idle;</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_idle.data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_pub.publish(flag_idle);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>everything<sp/>to<sp/>ROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ros::spinOnce();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO_THROTTLE(15.0,&quot;Waiting<sp/>for<sp/>Client<sp/>to<sp/>connect<sp/>on<sp/>port<sp/>%d&quot;,SAFETY_PORT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((sckClient=AcceptClient(id_sck))&gt;0){</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;New<sp/>Client<sp/>Accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Client<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acoustic_abort<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RELAY_WIFI){</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Acoustic<sp/>Safety<sp/>Abort<sp/>to<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_msgs::UInt8<sp/>acoustic_msg;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acoustic_msg.data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safety_abort.publish(acoustic_msg);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/wifi_acoustic_safety.cpp"/>
  </compounddef>
</doxygen>
