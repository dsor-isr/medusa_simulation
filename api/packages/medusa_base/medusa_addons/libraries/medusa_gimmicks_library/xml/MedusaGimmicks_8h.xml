<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="MedusaGimmicks_8h" kind="file" language="C++">
    <compoundname>MedusaGimmicks.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">ros/ros.h</includes>
    <includes local="no">eigen3/Eigen/Eigen</includes>
    <includes local="no">tf2_ros/transform_listener.h</includes>
    <includes local="no">tf2_ros/transform_broadcaster.h</includes>
    <includes local="yes">tf2_ros/message_filter.h</includes>
    <includes local="yes">tf2_geometry_msgs/tf2_geometry_msgs.h</includes>
    <includedby refid="MedusaGimmicks_8cpp" local="yes">src/MedusaGimmicks.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>string</label>
      </node>
      <node id="8">
        <label>tf2_ros/message_filter.h</label>
      </node>
      <node id="9">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="5">
        <label>eigen3/Eigen/Eigen</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="4">
        <label>ros/ros.h</label>
      </node>
      <node id="1">
        <label>include/medusa_gimmicks_library/MedusaGimmicks.h</label>
        <link refid="MedusaGimmicks_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tf2_ros/transform_listener.h</label>
      </node>
      <node id="7">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceMedusaGimmicks">MedusaGimmicks</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceMedusaGimmicks_1a7593be3c9eb0a532bd3f17ade4311d46" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double MedusaGimmicks::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>= 3.14159265</initializer>
        <briefdescription>
<para>PI value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="26" column="14" bodyfile="include/medusa_gimmicks_library/MedusaGimmicks.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceMedusaGimmicks_1afc8b49d869cf626984c781f4272446a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T MedusaGimmicks::getParameters</definition>
        <argsstring>(ros::NodeHandle &amp;_nh, std::string const &amp;parameter_name)</argsstring>
        <name>getParameters</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>_nh</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>parameter_name</declname>
        </param>
        <briefdescription>
<para>Get the Parameters object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of data of a desired parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nh</parametername>
</parameternamelist>
<parameterdescription>
<para>ros nodehandle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter_name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with paramenter name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T parameter value</para>
</simplesect>
<simplesect kind="note"><para>Option not considering default value, so the config file must have the parameter; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="38" column="15" bodyfile="include/medusa_gimmicks_library/MedusaGimmicks.h" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1a2f2695127af353f289b9d1f0c291a65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T MedusaGimmicks::getParameters</definition>
        <argsstring>(ros::NodeHandle &amp;_nh, std::string const &amp;parameter_name, T default_value)</argsstring>
        <name>getParameters</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>_nh</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>parameter_name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Get the Parameters object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of data of a desired parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nh</parametername>
</parameternamelist>
<parameterdescription>
<para>ros nodehandle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter_name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with parameter name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>default value of the parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T parameter value</para>
</simplesect>
<simplesect kind="note"><para>Option considering default value. Even if the parameter doesn&apos;t exist in config file it is possible to use a default value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="63" column="15" bodyfile="include/medusa_gimmicks_library/MedusaGimmicks.h" bodystart="63" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1a55003437fe750418cc4fb98b713e541d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T MedusaGimmicks::getParameters</definition>
        <argsstring>(ros::NodeHandle &amp;_nh, std::string const &amp;parameter_name, T default_value, bool delete_param)</argsstring>
        <name>getParameters</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>_nh</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>parameter_name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delete_param</declname>
        </param>
        <briefdescription>
<para>Get the Parameters object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of data of a desired parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_nh</parametername>
</parameternamelist>
<parameterdescription>
<para>ros nodehandle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameter_name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with parameter name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>default value of the parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_param</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean to delete or not the parameter from parameter server </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T parameter value</para>
</simplesect>
<simplesect kind="note"><para>Option considering default value. Even if the parameter doesn&apos;t exist in config file it is possible to use a default value. Removes parameter from parameter server </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="88" column="15" bodyfile="include/medusa_gimmicks_library/MedusaGimmicks.h" bodystart="88" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1a1b51f6e16effbcb245ee27749c560873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MedusaGimmicks::spherical_to_cartesian</definition>
        <argsstring>(double bearing, double elevation, double range, double *out_pos_cart)</argsstring>
        <name>spherical_to_cartesian</name>
        <param>
          <type>double</type>
          <declname>bearing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>elevation</declname>
        </param>
        <param>
          <type>double</type>
          <declname>range</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_pos_cart</declname>
        </param>
        <briefdescription>
<para>Convert from spherical to cartesian coordinates. Used mainly with usbl fixes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bearing</parametername>
</parameternamelist>
<parameterdescription>
<para>horizontal angle between the direction of an object and another object or between it and the true north direction in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elevation</parametername>
</parameternamelist>
<parameterdescription>
<para>angle measured between the horizontal and the vehicle line of sight to the object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>distance to the object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_pos_cart</parametername>
</parameternamelist>
<parameterdescription>
<para>cartesian coordinates pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="115" column="6" bodyfile="src/MedusaGimmicks.cpp" bodystart="11" bodyend="18" declfile="include/medusa_gimmicks_library/MedusaGimmicks.h" declline="115" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1aef72f9a794a43b63d02d62d966492d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MedusaGimmicks::signVal</definition>
        <argsstring>(double v)</argsstring>
        <name>signVal</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the sign of a double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>double value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 1 if value is positive </para>
</simplesect>
<simplesect kind="return"><para>int 0 if value is 0 </para>
</simplesect>
<simplesect kind="return"><para>int -1 if value is negative </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="125" column="5" bodyfile="src/MedusaGimmicks.cpp" bodystart="23" bodyend="26" declfile="include/medusa_gimmicks_library/MedusaGimmicks.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1ac6fa5ced08bb2823247905e4e0c2bf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MedusaGimmicks::wrap2pi</definition>
        <argsstring>(double theta, const int mode)</argsstring>
        <name>wrap2pi</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Wraps angle between [0, 2PI] or [-PI, PI]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = Wrap from [0, 2*pi]; 1 = Wrap from [-pi, pi] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double wraped angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="134" column="8" bodyfile="src/MedusaGimmicks.cpp" bodystart="29" bodyend="40" declfile="include/medusa_gimmicks_library/MedusaGimmicks.h" declline="134" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1a925ecbb2c29f104dfc626041dcbce4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MedusaGimmicks::wrapTo2pi</definition>
        <argsstring>(double in)</argsstring>
        <name>wrapTo2pi</name>
        <param>
          <type>double</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Wrap angle between [0, 2PI]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>angle in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double wraped angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="142" column="8" bodyfile="src/MedusaGimmicks.cpp" bodystart="43" bodyend="46" declfile="include/medusa_gimmicks_library/MedusaGimmicks.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1ac875cf906335cbf92ab710b2dc927028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MedusaGimmicks::angleDiff</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>angleDiff</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Method to calculate the diference between angles correctly even if they wrap between -pi and pi. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>angle 1 in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>angle 2 in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="151" column="8" bodyfile="src/MedusaGimmicks.cpp" bodystart="49" bodyend="55" declfile="include/medusa_gimmicks_library/MedusaGimmicks.h" declline="151" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaGimmicks_1a2082c4d621a6cb678b4a53f0a9f0ba02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void MedusaGimmicks::publishValue</definition>
        <argsstring>(ros::Publisher &amp;pub, B &amp;value)</argsstring>
        <name>publishValue</name>
        <param>
          <type>ros::Publisher &amp;</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>B &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>publisher type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>publisher </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_gimmicks_library/MedusaGimmicks.h" line="162" column="6" bodyfile="include/medusa_gimmicks_library/MedusaGimmicks.h" bodystart="162" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Developers:<sp/>DSOR<sp/>Team<sp/>-&gt;<sp/>@isr.ist.pt<sp/>Instituto<sp/>Superior<sp/>Tecnico<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Don&apos;t<sp/>you<sp/>miss<sp/>the<sp/>danger</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATKIN_WS_MEDUSAGIMMICKSNODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATKIN_WS_MEDUSAGIMMICKSNODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ros/ros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eigen3/Eigen/Eigen&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf2_ros/transform_listener.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf2_ros/transform_broadcaster.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tf2_ros/message_filter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceMedusaGimmicks" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMedusaGimmicks" kindref="compound">MedusaGimmicks</ref>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespaceMedusaGimmicks_1a7593be3c9eb0a532bd3f17ade4311d46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1a7593be3c9eb0a532bd3f17ade4311d46" kindref="member">PI</ref><sp/>=<sp/>3.14159265;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespaceMedusaGimmicks_1afc8b49d869cf626984c781f4272446a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespaceMedusaGimmicks_1afc8b49d869cf626984c781f4272446a6" kindref="member">getParameters</ref>(ros::NodeHandle<sp/>&amp;_nh,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;parameter_name){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>parameter;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_nh.getParam(parameter_name,<sp/>parameter))<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>parameter<sp/>[%s]<sp/>shutting<sp/>down&quot;</highlight><highlight class="normal">,<sp/>parameter_name.c_str());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ros::shutdown();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Note:<sp/>this<sp/>was<sp/>giving<sp/>problems<sp/>with<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nh.getParam(parameter_name,<sp/>parameter);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="namespaceMedusaGimmicks_1a2f2695127af353f289b9d1f0c291a65d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespaceMedusaGimmicks_1afc8b49d869cf626984c781f4272446a6" kindref="member">getParameters</ref>(ros::NodeHandle<sp/>&amp;_nh,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;parameter_name,<sp/>T<sp/>default_value){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>parameter;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_nh.getParam(parameter_name,<sp/>parameter))<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>default_value;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nh.getParam(parameter_name,<sp/>parameter);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="namespaceMedusaGimmicks_1a55003437fe750418cc4fb98b713e541d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespaceMedusaGimmicks_1afc8b49d869cf626984c781f4272446a6" kindref="member">getParameters</ref>(ros::NodeHandle<sp/>&amp;_nh,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;parameter_name,<sp/>T<sp/>default_value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delete_param){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>parameter;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_nh.getParam(parameter_name,<sp/>parameter))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>default_value;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nh.getParam(parameter_name,<sp/>parameter);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Delete<sp/>the<sp/>param<sp/>if<sp/>flag<sp/>is<sp/>set<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_param){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nh.deleteParam(parameter_name);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1a1b51f6e16effbcb245ee27749c560873" kindref="member">spherical_to_cartesian</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bearing,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elevation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_pos_cart);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1aef72f9a794a43b63d02d62d966492d0c" kindref="member">signVal</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1ac6fa5ced08bb2823247905e4e0c2bf5d" kindref="member">wrap2pi</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1a925ecbb2c29f104dfc626041dcbce4f6" kindref="member">wrapTo2pi</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1ac875cf906335cbf92ab710b2dc927028" kindref="member">angleDiff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="162" refid="namespaceMedusaGimmicks_1a2082c4d621a6cb678b4a53f0a9f0ba02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceMedusaGimmicks_1a2082c4d621a6cb678b4a53f0a9f0ba02" kindref="member">publishValue</ref>(ros::Publisher&amp;<sp/>pub,<sp/>B&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>aux_;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux_.data<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pub.publish(aux_);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//CATKIN_WS_MEDUSAGIMMICKSNODE_H</highlight></codeline>
    </programlisting>
    <location file="include/medusa_gimmicks_library/MedusaGimmicks.h"/>
  </compounddef>
</doxygen>
