<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceMedusaDiagnostics" kind="namespace" language="C++">
    <compoundname>MedusaDiagnostics</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1a23f067ba52167e48fa526bda013ec06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>diagnostic_msgs::DiagnosticStatus</type>
        <definition>diagnostic_msgs::DiagnosticStatus MedusaDiagnostics::setDiagnosisMsg</definition>
        <argsstring>(const uint8_t &amp;level, const std::string &amp;name, const std::string &amp;message, const std::string &amp;hardware_id)</argsstring>
        <name>setDiagnosisMsg</name>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hardware_id</declname>
        </param>
        <briefdescription>
<para>Set the Diagnosis Msg object (DiagnosticStatus) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>0-&gt;OK, 1-&gt; WARN, 2-&gt; ERROR, 3-&gt;STALE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of what sensor/node is being diagnosed, ex: /sensors/ + node_name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Say if it is ok or not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hardware_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the sensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>diagnostic_msgs::DiagnosticStatus </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="27" column="35" bodyfile="src/MedusaDiagnostics.cpp" bodystart="9" bodyend="19" declfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" declline="27" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1ae9b093bce14545f5cf7f8b23ec2faa9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MedusaDiagnostics::addKeyValue</definition>
        <argsstring>(diagnostic_msgs::DiagnosticArray *diagnostic_msg, const std::string &amp;key_name, const std::string &amp;value, const unsigned int &amp;index)</argsstring>
        <name>addKeyValue</name>
        <param>
          <type>diagnostic_msgs::DiagnosticArray *</type>
          <declname>diagnostic_msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>add key values to diagnostic message </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostic_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>array(DiagnosticArray) of diagnostic_msgs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of what we are diagnosing ex: Temperature, Current, Yaw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value being diagnosed, ex: from sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of the diagnostic_msg array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="37" column="6" bodyfile="src/MedusaDiagnostics.cpp" bodystart="21" bodyend="29" declfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1a4318dff9c2ae1e5412c30d5b999457f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool MedusaDiagnostics::checkLowerBound</definition>
        <argsstring>(const T &amp;value, const T &amp;lower_bound)</argsstring>
        <name>checkLowerBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lower_bound</declname>
        </param>
        <briefdescription>
<para>Check lower bound value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the values to be compared (int, double, float) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value being diagnosed, ex: received by the sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>value of lower bound defined by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the sensor value is lower than the lower bound </para>
</simplesect>
<simplesect kind="return"><para>false if the sensor value is bigger than the lower bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="48" column="18" bodyfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1a390bf63939537ba1bd353203b8ecc91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool MedusaDiagnostics::checkUpperBound</definition>
        <argsstring>(const T &amp;value, const T &amp;upper_bound)</argsstring>
        <name>checkUpperBound</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>upper_bound</declname>
        </param>
        <briefdescription>
<para><linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the values to be compared (int, double, float) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>received by the sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the upper bound defined by the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the sensor value is bigger than the upper bound </para>
</simplesect>
<simplesect kind="return"><para>false if the sensor value is lower thant the upper bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="61" column="18" bodyfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1a8b90d7cd8233b0cd8b79d81c43572739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MedusaDiagnostics::warnLevel</definition>
        <argsstring>(diagnostic_msgs::DiagnosticArray *diagnostic_msg, const std::string &amp;message, const unsigned int &amp;index)</argsstring>
        <name>warnLevel</name>
        <param>
          <type>diagnostic_msgs::DiagnosticArray *</type>
          <declname>diagnostic_msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Define the level as WARN and change the message in diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostic_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>array(DiagnosticArray) of diagnostic_msgs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>to clarify warning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of the diagnostic_msg array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="72" column="6" bodyfile="src/MedusaDiagnostics.cpp" bodystart="31" bodyend="35" declfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMedusaDiagnostics_1a27c0d7c166aaeb3643e49d7efc2cf5a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MedusaDiagnostics::errorLevel</definition>
        <argsstring>(diagnostic_msgs::DiagnosticArray *diagnostic_msg, const std::string &amp;message, const unsigned int &amp;index)</argsstring>
        <name>errorLevel</name>
        <param>
          <type>diagnostic_msgs::DiagnosticArray *</type>
          <declname>diagnostic_msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Define the level as Error and change the message in diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostic_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>array(DiagnosticArray) of diagnostic_msgs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>to clarify error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of the diagnostic_msg array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="81" column="6" bodyfile="src/MedusaDiagnostics.cpp" bodystart="37" bodyend="41" declfile="include/medusa_diagnostics_library/MedusaDiagnostics.h" declline="81" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="namespaceMedusaDiagnostics" kindref="compound">MedusaDiagnostics</ref> namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/medusa_diagnostics_library/MedusaDiagnostics.h" line="16" column="27"/>
  </compounddef>
</doxygen>
