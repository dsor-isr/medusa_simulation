<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="DeadReckoning_8cpp" kind="file" language="C++">
    <compoundname>DeadReckoning.cpp</compoundname>
    <includes refid="DeadReckoning_8h" local="yes">DeadReckoning.h</includes>
    <incdepgraph>
      <node id="10">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="6">
        <label>dsor_msgs/Measurement.h</label>
      </node>
      <node id="1">
        <label>src/algorithms/DeadReckoning.cpp</label>
        <link refid="DeadReckoning_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>auv_msgs/NavigationStatus.h</label>
      </node>
      <node id="2">
        <label>DeadReckoning.h</label>
        <link refid="DeadReckoning_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>medusa_msgs/mState.h</label>
      </node>
      <node id="3">
        <label>ros/ros.h</label>
      </node>
      <node id="9">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>std_srvs/Trigger.h</label>
      </node>
      <node id="7">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DeadReckoning_8h" kindref="compound">DeadReckoning.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="classDeadReckoning_1abeb2306fb4a5c5a97a7952eff6f84014" kindref="member">DeadReckoning::DeadReckoning</ref>(ros::NodeHandle<sp/>*nh,<sp/>ros::NodeHandle<sp/>*nh_private)</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/>:<sp/>nh_(*nh),<sp/>nh_private_(*nh_private)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeSubscribers();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>initializePublishers();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeServices();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Read<sp/>dvl<sp/>frame<sp/>from<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dvl_body_frame_<sp/>=<sp/>MedusaGimmicks::getParameters&lt;bool&gt;(</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;dvl/body_frame&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="classDeadReckoning_1a347747e68c644aea1c64b0b820d38d51" kindref="member">DeadReckoning::~DeadReckoning</ref>()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>state_dr_pub_.shutdown();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>sub_velocity_.shutdown();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>sub_orientation_.shutdown();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>sub_true_state_.shutdown();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>flag_sub_.shutdown();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>nh_.shutdown();</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Member<sp/>Helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>subscribers;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>DeadReckoning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>sub_velocity_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/velocity&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/measurement/velocity&quot;</highlight><highlight class="normal">),<sp/>10,<sp/>&amp;DeadReckoning::velocityCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>sub_orientation_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/orientation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/measurement/orientation&quot;</highlight><highlight class="normal">),<sp/>10,<sp/>&amp;DeadReckoning::orientationCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>sub_true_state_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/true_state&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/nav/filter/state&quot;</highlight><highlight class="normal">),<sp/>10,<sp/>&amp;DeadReckoning::stateCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>flag_sub_<sp/>=<sp/>nh_.subscribe(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/flag&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/Flag&quot;</highlight><highlight class="normal">),<sp/>10,<sp/>&amp;DeadReckoning::flagCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Member<sp/>helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>publishers;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ROS_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>DeadReckoning&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>state_dr_pub_<sp/>=<sp/>nh_private_.advertise&lt;auv_msgs::NavigationStatus&gt;(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/dead_reckoning&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/nav/filter/state_dr&quot;</highlight><highlight class="normal">),<sp/>10);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>state_dr_console_pub_<sp/>=<sp/>nh_private_.advertise&lt;medusa_msgs::mState&gt;(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics_dr/dead_reckoning_console&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/State_dr&quot;</highlight><highlight class="normal">),<sp/>10);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Intialize<sp/>Services</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::initializeServices(){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>reset_filter_dr_srv_<sp/>=<sp/>nh_.advertiseService(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;services_dr/reset_filter_dr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/nav/reset_filter_dr&quot;</highlight><highlight class="normal">),<sp/>&amp;DeadReckoning::resetDRService,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Get<sp/>next<sp/>DR<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classDeadReckoning_1a502de98d2e395a24368d14eff6951734" kindref="member">DeadReckoning::computePredict</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Check<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_request<sp/>=<sp/>(ros::Time::now()<sp/>-<sp/>last_predict_).toSec();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>State<sp/>pure<sp/>dead<sp/>reckoning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>predict(state_dr_,<sp/>t_request);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>last_predict_<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Return<sp/>horizontal<sp/>state<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_msg_.header.stamp<sp/>=<sp/>last_predict_;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>state_dr_msg_.position.north<sp/>=<sp/>state_dr_[0];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>state_dr_msg_.position.east<sp/>=<sp/>state_dr_[1];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>state_dr_msg_.seafloor_velocity.x<sp/>=<sp/>dvl_vx_;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>state_dr_msg_.seafloor_velocity.y<sp/>=<sp/>dvl_vy_;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>state_dr_msg_.orientation.x<sp/>=<sp/>roll_;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>state_dr_msg_.orientation.y<sp/>=<sp/>pitch_;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>state_dr_msg_.orientation.z<sp/>=<sp/>yaw_;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Header<sp/>Information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_console_.header.stamp<sp/>=<sp/>last_predict_;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>state_dr_console_.X<sp/>=<sp/>state_dr_[1];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>state_dr_console_.Y<sp/>=<sp/>state_dr_[0];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>state_dr_console_.Roll<sp/>=<sp/>roll_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_console_.Pitch<sp/>=<sp/>pitch_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_console_.Yaw<sp/>=<sp/>yaw_;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_console_.Vx<sp/>=<sp/>dvl_vx_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>state_dr_console_.Vy<sp/>=<sp/>dvl_vy_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Publish<sp/>state<sp/>dr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>state_dr_pub_.publish(state_dr_msg_);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Publish<sp/>state<sp/>dr<sp/>for<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>state_dr_console_pub_.publish(state_dr_console_);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Initialize<sp/>DR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeadReckoning::initialize()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Set<sp/>state<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>state_dr_<sp/>=<sp/>true_state_;<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>last_predict_<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Dead<sp/>Reckoning:<sp/>initialized<sp/>with<sp/>position<sp/>[%.2f,<sp/>%.2f]&quot;</highlight><highlight class="normal">,<sp/>state_dr_[0],<sp/>state_dr_[1]);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>DR<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::predict(std::vector&lt;double&gt;<sp/>&amp;state_vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Propagate<sp/>State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>state_vec[0]<sp/>=<sp/>state_dr_[0]<sp/>+<sp/>dt<sp/>*<sp/>dvl_vx_;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>state_vec[1]<sp/>=<sp/>state_dr_[1]<sp/>+<sp/>dt<sp/>*<sp/>dvl_vy_;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Callbacks<sp/>Section<sp/>/<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::velocityCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dsor_msgs::Measurement<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Check<sp/>if<sp/>velocity<sp/>measurement<sp/>is<sp/>from<sp/>dvl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.header.frame_id.find(</highlight><highlight class="stringliteral">&quot;dvl_bt&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>body<sp/>velocity<sp/>to<sp/>inercial<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_dvl_body_frame_){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dvl_vx_<sp/>=<sp/>cos(DEG2RAD(yaw_))*msg.value[0]<sp/><sp/>-<sp/>sin(DEG2RAD(yaw_))*msg.value[1];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dvl_vy_<sp/>=<sp/>sin(DEG2RAD(yaw_))*msg.value[0]<sp/>+<sp/>cos(DEG2RAD(yaw_))*msg.value[1];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dvl_vx_<sp/>=<sp/>msg.value[0];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dvl_vy_<sp/>=<sp/>msg.value[1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//+.+<sp/>Compute<sp/>next<sp/>DR<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classDeadReckoning_1a502de98d2e395a24368d14eff6951734" kindref="member">computePredict</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::orientationCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dsor_msgs::Measurement<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Check<sp/>if<sp/>measurement<sp/>is<sp/>from<sp/>ahrs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.header.frame_id.find(</highlight><highlight class="stringliteral">&quot;ahrs&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>roll_<sp/>=<sp/>RAD2DEG(MedusaGimmicks::wrap2pi(msg.value[0],<sp/>0));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>pitch_<sp/>=<sp/>RAD2DEG(MedusaGimmicks::wrap2pi(msg.value[1],<sp/>0));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>yaw_<sp/>=<sp/>RAD2DEG(MedusaGimmicks::wrap2pi(msg.value[2],<sp/>0));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>State<sp/>from<sp/>the<sp/>navigation<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::stateCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>auv_msgs::NavigationStatus<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>true_state_[0]<sp/>=<sp/>msg.position.north;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>true_state_[1]<sp/>=<sp/>msg.position.east;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>To<sp/>DR<sp/>position<sp/>starts<sp/>with<sp/>the<sp/>same<sp/>position<sp/>of<sp/>the<sp/>navigation<sp/>filter<sp/>position<sp/>(truth<sp/>position)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialized_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_=<sp/>initialize();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Flag<sp/>to<sp/>reset<sp/>DR<sp/>postion<sp/>when<sp/>a<sp/>mission<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeadReckoning::flagCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Int8<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Flag<sp/>=<sp/>6<sp/>indicates<sp/>the<sp/>start<sp/>of<sp/>a<sp/>mission<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.data<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;DEAD<sp/>RECKONING<sp/>RESETED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>initialize();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Service<sp/>to<sp/>manual<sp/>reset<sp/>DR<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DeadReckoning::resetDRService(std_srvs::Trigger::Request<sp/>&amp;req,<sp/>std_srvs::Trigger::Response<sp/>&amp;res){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>The<sp/>DR<sp/>position<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>navigation<sp/>state<sp/>position<sp/>(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>state_dr_<sp/>=<sp/>true_state_;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>res.success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>res.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FILTER_DR<sp/>reseted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/algorithms/DeadReckoning.cpp"/>
  </compounddef>
</doxygen>
