<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="FiltersNode_8cpp" kind="file" language="C++">
    <compoundname>FiltersNode.cpp</compoundname>
    <includes refid="FiltersNode_8h" local="yes">FiltersNode.h</includes>
    <incdepgraph>
      <node id="31">
        <label>geometry_msgs/TwistWithCovarianceStamped.h</label>
      </node>
      <node id="11">
        <label>medusa_gimmicks_library/MedusaGimmicks.h</label>
      </node>
      <node id="21">
        <label>FilterGimmicks.h</label>
        <link refid="FilterGimmicks_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>dsor_msgs/Measurement.h</label>
      </node>
      <node id="28">
        <label>std_msgs/Bool.h</label>
      </node>
      <node id="27">
        <label>stdlib.h</label>
      </node>
      <node id="29">
        <label>nav_msgs/Odometry.h</label>
      </node>
      <node id="19">
        <label>Eigen/Eigen</label>
      </node>
      <node id="5">
        <label>auv_msgs/NavigationStatus.h</label>
      </node>
      <node id="12">
        <label>HorizontalFilter.h</label>
        <link refid="HorizontalFilter_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>string</label>
      </node>
      <node id="15">
        <label>tf2_ros/message_filter.h</label>
      </node>
      <node id="33">
        <label>tf2/convert.h</label>
      </node>
      <node id="1">
        <label>src/ros/FiltersNode.cpp</label>
        <link refid="FiltersNode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="35">
        <label>fstream</label>
      </node>
      <node id="39">
        <label>GeographicLib/UTMUPS.hpp</label>
      </node>
      <node id="24">
        <label>eigen3/Eigen/Eigen</label>
      </node>
      <node id="38">
        <label>medusa_msgs/Currents.h</label>
      </node>
      <node id="25">
        <label>VerticalFilter.h</label>
        <link refid="VerticalFilter_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>geometry_msgs/TransformStamped.h</label>
      </node>
      <node id="30">
        <label>geometry_msgs/PoseWithCovarianceStamped.h</label>
      </node>
      <node id="34">
        <label>geometry_msgs/QuaternionStamped.h</label>
      </node>
      <node id="23">
        <label>vector</label>
      </node>
      <node id="37">
        <label>std_msgs/Empty.h</label>
      </node>
      <node id="6">
        <label>medusa_msgs/mState.h</label>
      </node>
      <node id="2">
        <label>FiltersNode.h</label>
        <link refid="FiltersNode_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>geometry_msgs/Vector3Stamped.h</label>
      </node>
      <node id="4">
        <label>ros/ros.h</label>
      </node>
      <node id="10">
        <label>math.h</label>
      </node>
      <node id="36">
        <label>std_msgs/String.h</label>
      </node>
      <node id="20">
        <label>GeographicLib/GeoCoords.hpp</label>
      </node>
      <node id="9">
        <label>std_srvs/Trigger.h</label>
      </node>
      <node id="13">
        <label>tf2_ros/transform_listener.h</label>
      </node>
      <node id="14">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="32">
        <label>RotationalFilter.h</label>
        <link refid="RotationalFilter_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>DeadReckoning.h</label>
        <link refid="DeadReckoning_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>std_msgs/Int8.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="FiltersNode_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/FiltersNode.cpp" line="563" column="5" bodyfile="src/ros/FiltersNode.cpp" bodystart="563" bodyend="581"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Developers:<sp/>DSOR<sp/>Team<sp/>-&gt;<sp/>@isr.ist.pt<sp/>Instituto<sp/>Superior<sp/>Tecnico</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FiltersNode_8h" kindref="compound">FiltersNode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="classFiltersNode_1a49d2e8adb13b49affd01f99dce525be3" kindref="member">FiltersNode::FiltersNode</ref>(ros::NodeHandle<sp/>*nh,<sp/>ros::NodeHandle<sp/>*nh_private)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>:<sp/>nh_(*nh),<sp/>nh_private_(*nh_private)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;in<sp/>class<sp/>constructor<sp/>of<sp/>FiltersNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>tfListener_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tf2_ros::TransformListener(tfBuffer_);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>loadParams();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeSubscribers();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>initializePublishers();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeTimer();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="classFiltersNode_1a0b77b79828d37ade676078d8e3f16c1a" kindref="member">FiltersNode::~FiltersNode</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>state_pub_.shutdown();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>currents_pub_.shutdown();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>sub_reset_.shutdown();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>sub_position_.shutdown();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>sub_velocity_.shutdown();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>sub_orientation_.shutdown();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//sub_acceleration_.shutdown();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>stop<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>list_cleaner_timer_.stop();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>timer_.stop();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>shutdown<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>nh_.shutdown();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>nh_private_.shutdown();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Member<sp/>Helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>subscribers;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::initializeSubscribers()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>Subscribers<sp/>for<sp/>FiltersNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>sub_reset_<sp/>=<sp/>nh_private_.subscribe(p_topic_reset_,<sp/>10,<sp/>&amp;FiltersNode::resetCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>sub_position_<sp/>=<sp/>nh_.subscribe(p_topic_position_,<sp/>10,<sp/>&amp;FiltersNode::measurementCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>sub_velocity_<sp/>=<sp/>nh_.subscribe(p_topic_velocity_,<sp/>10,<sp/>&amp;FiltersNode::measurementCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>sub_orientation_<sp/>=<sp/>nh_.subscribe(p_topic_orientation_,<sp/>10,<sp/>&amp;FiltersNode::measurementCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Member<sp/>helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>publishers;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::initializePublishers()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>Publishers<sp/>for<sp/>FiltersNode&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>---&gt;<sp/>add<sp/>publishers<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>state_pub_<sp/>=<sp/>nh_private_.advertise&lt;auv_msgs::NavigationStatus&gt;(p_topic_state_,<sp/>10);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>currents_pub_<sp/>=<sp/>nh_private_.advertise&lt;medusa_msgs::Currents&gt;(MedusaGimmicks::getParameters&lt;std::string&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/currents&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;currents&quot;</highlight><highlight class="normal">),<sp/>10);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Member<sp/>helper<sp/>function<sp/>to<sp/>set<sp/>up<sp/>the<sp/>timer;<sp/>This<sp/>is<sp/>a<sp/>more<sp/>flexible<sp/>and<sp/>useful<sp/>form<sp/>of<sp/>the<sp/>ros::Rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::initializeTimer()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>list_cleaner_timer_<sp/>=<sp/>nh_.createTimer(ros::Duration(10.0),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;FiltersNode::listTimerCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>timer_<sp/>=<sp/>nh_.createTimer(ros::Duration(1.0<sp/>/<sp/><ref refid="classFiltersNode_1ab8595e87f3b9e51348f7885a88468d5f" kindref="member">FiltersNode::nodeFrequency</ref>()),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;FiltersNode::stateTimerCallback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Set<sp/>frequency<sp/>of<sp/>the<sp/>node<sp/>default<sp/>is<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFiltersNode_1ab8595e87f3b9e51348f7885a88468d5f" kindref="member">FiltersNode::nodeFrequency</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>nh_.param(</highlight><highlight class="stringliteral">&quot;node_frequency&quot;</highlight><highlight class="normal">,<sp/>node_frequency,<sp/>10.0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Node<sp/>will<sp/>run<sp/>at<sp/>:<sp/>%lf<sp/>[hz]&quot;</highlight><highlight class="normal">,<sp/>node_frequency);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_frequency;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Load<sp/>the<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::loadParams()<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Filters<sp/>configurations<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structHorizontalFilter_1_1config" kindref="compound">HorizontalFilter::config</ref><sp/>p_hconfig;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structVerticalFilter_1_1config" kindref="compound">VerticalFilter::config</ref><sp/>p_vconfig;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structRotationalFilter_1_1config" kindref="compound">RotationalFilter::config</ref><sp/>p_rconfig;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Loading<sp/>the<sp/>Node<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Load<sp/>TF<sp/>Parameters<sp/>from<sp/>the<sp/>ros<sp/>parameter<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>p_hconfig.broadcast_tf<sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;bool&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;tf/broadcast&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>p_vconfig.broadcast_tf<sp/>=<sp/>p_hconfig.broadcast_tf;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>p_hconfig.frames<sp/>=<sp/>MedusaGimmicks::getParameters&lt;std::vector&lt;std::string&gt;&gt;(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;tf/frames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>p_vconfig.<ref refid="structVerticalFilter_1_1config_1adee10f1abc927446df9dfe5d8161966e" kindref="member">frames</ref><sp/>=<sp/>p_hconfig.frames;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>p_rconfig.frames<sp/>=<sp/>p_hconfig.frames;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>world_frame_id_<sp/>=<sp/>p_hconfig.frames[3];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>map_frame_id_<sp/>=<sp/>p_hconfig.frames[2];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>base_frame_id_<sp/>=<sp/>p_hconfig.frames[0];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>tf2_ros::TransformBroadcaster<sp/>br_node;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>p_hconfig.br_node<sp/>=<sp/>&amp;br_node;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>p_vconfig.br_node<sp/>=<sp/>&amp;br_node;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>p_rconfig.br_node<sp/>=<sp/>&amp;br_node;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Load<sp/>ros<sp/>topics<sp/>from<sp/>the<sp/>ros<sp/>parameter<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ros_subs<sp/>=</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::vector&lt;std::string&gt;&gt;(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/subscribers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ros_pubs<sp/>=</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;std::vector&lt;std::string&gt;&gt;(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;topics/publishers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Do<sp/>we<sp/>need<sp/>this<sp/>check?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ros_subs.size())<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Minimum<sp/>number<sp/>of<sp/>Topics<sp/>in<sp/>topics/subscribers<sp/>is<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>One<sp/>day<sp/>if<sp/>you<sp/>want<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//p_topic_acceleration<sp/>=<sp/>ros_subs[4];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_topic_reset_<sp/>=<sp/>ros_subs[0];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_topic_position_<sp/>=<sp/>ros_subs[1];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_topic_velocity_<sp/>=<sp/>ros_subs[2];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_topic_orientation_<sp/>=<sp/>ros_subs[3];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Input<sp/>in<sp/>topics/subscribers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Add<sp/>check<sp/>and<sp/>default<sp/>input<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>p_topic_state_<sp/>=<sp/>ros_pubs[0];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Get<sp/>Origin<sp/>Global<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>origin_lat_<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;/originLat&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>38.765852);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>origin_lon_<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;/originLon&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-9.09281873);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>origin_alt_<sp/>=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;/originAlt&quot;</highlight><highlight class="normal">,<sp/>1.0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>gamma,<sp/>k;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>GeographicLib::UTMUPS::Forward(origin_lat_,<sp/>origin_lon_,<sp/>zone_,<sp/>northp_,<sp/>x,<sp/>y,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma,<sp/>k);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;FiltersNode:<sp/>Can<sp/>not<sp/>convert<sp/>origin<sp/>Lat/Lon,<sp/>are<sp/>they<sp/>defined<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>valid?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Loading<sp/>the<sp/>KF<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Kalman<sp/>Filter<sp/>Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>p_hconfig.kalman_config[0]<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/predict_period&quot;</highlight><highlight class="normal">,<sp/>0.1);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>p_hconfig.kalman_config[1]<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/save_measurement_interval&quot;</highlight><highlight class="normal">,<sp/>60);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>p_hconfig.kalman_config[2]<sp/>=<sp/>MedusaGimmicks::getParameters&lt;double&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/reset_period&quot;</highlight><highlight class="normal">,<sp/>300);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>memcpy(&amp;p_vconfig.kalman_config,<sp/>&amp;p_hconfig.kalman_config,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p_hconfig.kalman_config));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>memcpy(&amp;p_rconfig.kalman_config,<sp/>&amp;p_hconfig.kalman_config,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p_hconfig.kalman_config));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>placeholder[6];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Process<sp/>Covariance<sp/>-<sp/>Position,<sp/>Velocity,<sp/>Orientation,<sp/>Orientation<sp/>Rate,<sp/>Acceleration<sp/>and<sp/>Altitude<sp/>(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>extractArrayDouble(placeholder,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MedusaGimmicks::getParameters&lt;XmlRpc::XmlRpcValue&gt;(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/process_covariance&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>process[]<sp/>=<sp/>{placeholder[1],<sp/>placeholder[1],<sp/>placeholder[4],</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placeholder[1]};</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;p_hconfig.process_noise,<sp/>&amp;process,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(process));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>process[]<sp/>=<sp/>{placeholder[0],<sp/>placeholder[1],<sp/>placeholder[0]};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;p_vconfig.process_noise,<sp/>&amp;process,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(process));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>process[]<sp/>=<sp/>{placeholder[2],<sp/>placeholder[3]};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;p_rconfig.process_noise,<sp/>&amp;process,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(process));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Initialization<sp/>Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>p_rconfig.bypass_ahrs<sp/>=<sp/>MedusaGimmicks::getParameters&lt;bool&gt;(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/bypass_ahrs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>m_initial<sp/>=<sp/>readManuallyInitialization(MedusaGimmicks::getParameters&lt;XmlRpc::XmlRpcValue&gt;(nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/manually_initialization&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>m_initial.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>sensorSplit(m_initial,<sp/>p_hconfig.meas_init,<sp/>p_vconfig.meas_init,<sp/>p_rconfig.meas_init);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_initial.header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||<sp/>m_initial.header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>p_hconfig.initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>p_vconfig.initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rconfig.initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;FILTER<sp/>will<sp/>Initialize<sp/>With<sp/>the<sp/>Manually<sp/>Initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Read<sp/>dvl<sp/>frame<sp/>from<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>p_dvl_body_frame_<sp/>=<sp/>MedusaGimmicks::getParameters&lt;bool&gt;(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;dvl/body_frame&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Input<sp/>Sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Loading<sp/>the<sp/>Sensors<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>active_sensors_<sp/>=<sp/>readSensors(MedusaGimmicks::getParameters&lt;XmlRpc::XmlRpcValue&gt;(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nh_private_,<sp/></highlight><highlight class="stringliteral">&quot;kalman_filter/sensors&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>active_sensors_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>m_h,<sp/>m_v,<sp/>m_r;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>sensorSplit(active_sensors_[i],<sp/>m_h,<sp/>m_v,<sp/>m_r);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_h.config.sum()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_hconfig.sensors.push_back(m_h);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_v.config.sum()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_vconfig.sensors.push_back(m_v);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_r.config.sum()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_rconfig.sensors.push_back(m_r);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Load<sp/>configuration<sp/>parameters<sp/>for<sp/>Horz.<sp/>Vert.<sp/>and<sp/>Rot.<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>hFilter_.<ref refid="classHorizontalFilter_1a0ee25d3a0cb0155d907629d58d7fa5b7" kindref="member">configure</ref>(p_hconfig);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;HorizontalFilter:<sp/>Configured<sp/>Successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>vFilter_.<ref refid="classVerticalFilter_1aecf6e8a357eda4740decf01c4223b3bd" kindref="member">configure</ref>(p_vconfig);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;VerticalFilter:<sp/><sp/><sp/>Configured<sp/>Successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>rFilter_.<ref refid="classRotationalFilter_1a97d03573fa31f1b1746e67448444c9c8" kindref="member">configure</ref>(p_rconfig);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;RotationalFilter:<sp/>Configured<sp/>Successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Callbacks<sp/>Section<sp/>/<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::measurementCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dsor_msgs::Measurement<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>m(msg);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Disregard<sp/>input<sp/>if<sp/>measurement<sp/>config<sp/>does<sp/>not<sp/>match<sp/>the<sp/>value<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::vector&lt;FilterGimmicks::measurement&gt;::iterator<sp/>it_active_sensor<sp/>=</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::find_if(std::begin(active_sensors_),<sp/>std::end(active_sensors_),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1predicate__frame__id" kindref="compound">FilterGimmicks::predicate_frame_id</ref>(msg.header.frame_id));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_active_sensor<sp/>==<sp/>std::end(active_sensors_))<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_WARN(&quot;FilterNode:<sp/>No<sp/>active<sp/>sensor<sp/>for<sp/>the<sp/>mesurement<sp/>received&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>m.base_frame<sp/>=<sp/>it_active_sensor-&gt;base_frame;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>m.sensor_config<sp/>=<sp/>it_active_sensor-&gt;sensor_config;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Override<sp/>with<sp/>configure<sp/>noise<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_active_sensor-&gt;noise.sum()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>m.noise<sp/>=<sp/>it_active_sensor-&gt;noise;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>m.outlier_tolerance<sp/>=<sp/>it_active_sensor-&gt;outlier_tolerance;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>m.reject_counter<sp/>=<sp/>it_active_sensor-&gt;reject_counter;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>m.outlier_increase<sp/>=<sp/>it_active_sensor-&gt;outlier_increase;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_active_sensor-&gt;time_of_previous_meas<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it_active_sensor-&gt;time_of_previous_meas<sp/>=<sp/>(m.header.stamp).toSec();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.time_of_previous_meas<sp/>=<sp/>it_active_sensor-&gt;time_of_previous_meas;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.time_of_previous_meas<sp/>=<sp/>it_active_sensor-&gt;time_of_previous_meas;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it_active_sensor-&gt;time_of_previous_meas<sp/>=<sp/>(m.header.stamp).toSec();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>m.base_frame<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>m_h,<sp/>m_v,<sp/>m_r;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>sensorSplit(m,<sp/>m_h,<sp/>m_v,<sp/>m_r);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hposition&quot;</highlight><highlight class="normal"><sp/>||<sp/>m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hvelocity&quot;</highlight><highlight class="normal"><sp/>||<sp/>m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;acceleration&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>hFilter_.<ref refid="classHorizontalFilter_1ae786c137e3dcb23c8d4beaeb6c852875" kindref="member">newMeasurement</ref>(m_h);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Vposition&quot;</highlight><highlight class="normal"><sp/>||<sp/>m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Vvelocity&quot;</highlight><highlight class="normal"><sp/>||<sp/>m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;altitude&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>vFilter_.<ref refid="classVerticalFilter_1a1ceca4f1ae15d83904893ad332fdd88b" kindref="member">newMeasurement</ref>(m_v);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;orientation&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>rFilter_.<ref refid="classRotationalFilter_1a2c88d2e09d25a0b912ac9b724d349f4c" kindref="member">newMeasurement</ref>(m_r);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::resetCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::Empty<sp/>&amp;msg)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>hFilter_.<ref refid="classHorizontalFilter_1ad393f414ecd694614ae7d50917eb4db4" kindref="member">resetFilter</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>vFilter_.<ref refid="classVerticalFilter_1a04b65c8d22f08b194e9091453fb67743" kindref="member">resetFilter</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>rFilter_.<ref refid="classRotationalFilter_1af277342314bbfe6767eaa5d1567bd754" kindref="member">resetFilter</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Iteration<sp/>via<sp/>timer<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::stateTimerCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ros::Time<sp/>tRequest<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>why<sp/>horizontal<sp/>has<sp/>a<sp/>return<sp/>when<sp/>fails<sp/>and<sp/>the<sp/>others<sp/>not??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hFilter_.<ref refid="classHorizontalFilter_1ac6f1f02d0916ed73238c71288e439b61" kindref="member">computePredict</ref>(state_,<sp/>tRequest))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>currents<sp/>=<sp/>hFilter_.<ref refid="classHorizontalFilter_1a2c072c54c6e27337f96b99a3e27dee3f" kindref="member">getExtimateCurrents</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//+.+<sp/>State<sp/>of<sp/>base_frame_id<sp/>is<sp/>estimated<sp/>in<sp/>world_frame_id<sp/>at<sp/>time<sp/>tRequest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>rFilter_.<ref refid="classRotationalFilter_1a3bd18f70b574d8474a93dfc114dc010d" kindref="member">computePredict</ref>(state_,<sp/>tRequest);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>vFilter_.<ref refid="classVerticalFilter_1a07b36ed347b4631d0d83cca4f641ae39" kindref="member">computePredict</ref>(state_,<sp/>tRequest);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>state_.header.stamp<sp/>=<sp/>tRequest;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>state_.header.frame_id<sp/>=<sp/>base_frame_id_;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>state_.origin.latitude<sp/>=<sp/>origin_lat_;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>state_.origin.longitude<sp/>=<sp/>origin_lon_;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>state_.origin.altitude<sp/>=<sp/>origin_alt_;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tfBuffer_.canTransform(world_frame_id_,<sp/>base_frame_id_,<sp/>ros::Time(0)))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::TransformStamped<sp/>transformStamped<sp/>=</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tfBuffer_.lookupTransform(base_frame_id_,<sp/>world_frame_id_,<sp/>ros::Time(0));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>transformStamped.transform.translation.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>transformStamped.transform.translation.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>transformStamped.transform.translation.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2::doTransform(state_.seafloor_velocity,<sp/>state_.body_velocity,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformStamped);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_WARN_DELAYED_THROTTLE(</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10.0,<sp/></highlight><highlight class="stringliteral">&quot;FilterNode:<sp/>seafloor<sp/>velocity<sp/>is<sp/>not<sp/>transformable,<sp/>is<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;right<sp/>tf<sp/>being<sp/>published?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>position<sp/>in<sp/>lat/lon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(world_frame_id_<sp/>==<sp/>map_frame_id_)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma,<sp/>k;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GeographicLib::UTMUPS::Reverse(zone_,<sp/>northp_,<sp/>state_.position.east,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.position.north,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.global_position.latitude,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.global_position.longitude,<sp/>gamma,<sp/>k);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_ERROR_DELAYED_THROTTLE(</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0,<sp/></highlight><highlight class="stringliteral">&quot;FitlersNode:<sp/>Could<sp/>not<sp/>convert<sp/>from<sp/>UTM<sp/>to<sp/>Lan/Lon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>state_.status<sp/>=<sp/>auv_msgs::NavigationStatus::STATUS_ALL_OK;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>state_pub_.publish(state_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>create<sp/>currents<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>medusa_msgs::Currents<sp/>currents_msg;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>currents_msg.x_current<sp/>=<sp/>currents[0];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>currents_msg.y_current<sp/>=<sp/>currents[1];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>currents_msg.Header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>publish<sp/>the<sp/>corrents<sp/>velocities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>currents_pub_.publish(currents_msg);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::listTimerCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::TimerEvent<sp/>&amp;event)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>hFilter_.<ref refid="classHorizontalFilter_1a0157428ae0e862dd3a7bdb1b0db065ab" kindref="member">deleteMeasurementsInBuffer</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">std::vector&lt;FilterGimmicks::measurement&gt;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">FiltersNode::readSensors(XmlRpc::XmlRpcValue<sp/>valueXml)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>std::vector&lt;FilterGimmicks::measurement&gt;<sp/>sensors;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>It<sp/>needs<sp/>to<sp/>be<sp/>int32_t<sp/>????<sp/>why??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>valueXml.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>sensor(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;frame_id&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extractVectorDouble(valueXml[i][</highlight><highlight class="stringliteral">&quot;noise&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;outlier_tolerance&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;reject_counter&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;outlier_increase&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueXml[i][</highlight><highlight class="stringliteral">&quot;base_frame&quot;</highlight><highlight class="normal">].getType()<sp/>==</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlRpc::XmlRpcValue::TypeBoolean)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor.base_frame<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i][</highlight><highlight class="stringliteral">&quot;base_frame&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>sensors.push_back(sensor);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sensors;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref></highlight></codeline>
<codeline lineno="378"><highlight class="normal">FiltersNode::readManuallyInitialization(XmlRpc::XmlRpcValue<sp/>valueXml)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>sensor(</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[</highlight><highlight class="stringliteral">&quot;frame_id&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extractVectorDouble(valueXml[</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extractVectorDouble(valueXml[</highlight><highlight class="stringliteral">&quot;noise&quot;</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sensor;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">FiltersNode::extractVectorDouble(XmlRpc::XmlRpcValue<sp/>valueXml)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>vector;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>valueXml.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(valueXml[i].getType())<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XmlRpc::XmlRpcValue::TypeDouble:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i]));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>XmlRpc::XmlRpcValue::TypeInt:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(valueXml[i])));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>in<sp/>the<sp/>case<sp/>the<sp/>type<sp/>is<sp/>invalid<sp/>(cases<sp/>that<sp/>we<sp/>do<sp/>not<sp/>handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::extractArrayDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*array,<sp/>XmlRpc::XmlRpcValue<sp/>double_array)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>double_array.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(double_array[i].getType()<sp/>==<sp/>XmlRpc::XmlRpcValue::TypeDouble)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(double_array[i]));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(double_array[i].getType()<sp/>==<sp/>XmlRpc::XmlRpcValue::TypeInt)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(double_array[i])));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FiltersNode::sensorSplit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>&amp;m_in,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>&amp;m_horizontal,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>&amp;m_vertical,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFilterGimmicks_1_1measurement" kindref="compound">FilterGimmicks::measurement</ref><sp/>&amp;m_rotation)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>[0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10<sp/>11<sp/>12<sp/>13<sp/>14]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>[H<sp/>H<sp/>V<sp/>H<sp/>H<sp/>V<sp/>R<sp/>R<sp/>R<sp/>R<sp/>R<sp/><sp/>R<sp/><sp/>H<sp/><sp/>H<sp/><sp/>V]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>m_horizontal.setLength(HorizontalFilter::MEAS_LEN);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>m_vertical.setLength(<ref refid="classVerticalFilter_1aa4c50a769ba7782bf354b86af46df4ba" kindref="member">VerticalFilter::MEAS_LEN</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>m_rotation.setLength(RotationalFilter::STATE_LEN);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>m_horizontal.noise.setZero();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>m_vertical.noise.setZero();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>m_rotation.noise.setZero();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>m_horizontal.config.setZero();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>m_vertical.config.setZero();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>m_rotation.config.setZero();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Splitting<sp/>the<sp/>Overhead<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>m_horizontal.base_frame<sp/>=<sp/>m_in.base_frame;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>m_horizontal.header.frame_id<sp/>=<sp/>m_in.header.frame_id;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>m_vertical.header.frame_id<sp/>=<sp/>m_in.header.frame_id;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>m_rotation.header.frame_id<sp/>=<sp/>m_in.header.frame_id;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>m_horizontal.header.stamp<sp/>=<sp/>m_in.header.stamp;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>m_vertical.header.stamp<sp/>=<sp/>m_in.header.stamp;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>m_rotation.header.stamp<sp/>=<sp/>m_in.header.stamp;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>m_horizontal.time_of_previous_meas<sp/>=<sp/>m_in.time_of_previous_meas;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hposition&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>basically<sp/>measurements<sp/>from:<sp/>gnss,<sp/>usbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.config.segment&lt;2&gt;(0)<sp/>=<sp/>Eigen::VectorXd::Ones(2);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value<sp/>=<sp/>m_in.value;<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Vposition&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>basically<sp/>measurements<sp/>from:<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.config(0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vertical.value<sp/>=<sp/>m_in.value;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hvelocity&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>basically<sp/>measurements<sp/>from:<sp/>dvl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>here<sp/>the<sp/>vz<sp/>velocity<sp/>-<sp/>(to<sp/>do<sp/>in<sp/>the<sp/>next<sp/>iteration<sp/>of<sp/>the<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.config.segment&lt;2&gt;(2)<sp/>=<sp/>Eigen::VectorXd::Ones(2);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value.resize(2);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>if<sp/>the<sp/>measurements<sp/>ara<sp/>expressed<sp/>in<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_dvl_body_frame_){</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Convert<sp/>velocities<sp/>form<sp/>the<sp/>body<sp/>to<sp/>the<sp/>inercial<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value(0)<sp/>=<sp/>cos(DEG2RAD(state_.orientation.z))*m_in.value(0)<sp/><sp/>-<sp/>sin(DEG2RAD(state_.orientation.z))*m_in.value(1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value(1)<sp/>=<sp/>sin(DEG2RAD(state_.orientation.z))*m_in.value(0)<sp/><sp/>+<sp/>cos(DEG2RAD(state_.orientation.z))*m_in.value(1);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>If<sp/>in<sp/>Inercial<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value<sp/>=<sp/>m_in.value.segment&lt;2&gt;(0);<sp/><sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Vvelocity&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>This<sp/>is<sp/>not<sp/>being<sp/>used<sp/>-<sp/>copy<sp/>this<sp/>&quot;Hvelocity&quot;<sp/>to<sp/>use<sp/>the<sp/>vz<sp/>from<sp/>the<sp/>dvl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.config(1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vertical.value<sp/>=<sp/>m_in.value;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;orientation&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>basically<sp/>measurements<sp/>from:<sp/>ahrs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>angles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.config.segment&lt;3&gt;(0)<sp/>=<sp/>Eigen::VectorXd::Ones(3);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.noise.segment&lt;3&gt;(0)<sp/>=<sp/>m_in.noise.segment&lt;3&gt;(0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation.value.segment&lt;3&gt;(0)<sp/>=<sp/>m_in.value.segment&lt;3&gt;(0);<sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>angle<sp/>rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.config.segment&lt;3&gt;(3)<sp/>=<sp/>Eigen::VectorXd::Ones(3);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.noise.segment&lt;3&gt;(3)<sp/>=<sp/>m_in.noise.segment&lt;3&gt;(3);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation.value.segment&lt;3&gt;(3)<sp/>=<sp/>m_in.value.segment&lt;3&gt;(3);<sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;acceleration&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>we<sp/>dont<sp/>have<sp/>a<sp/>on<sp/>board<sp/>sensor<sp/>to<sp/>measur<sp/>that<sp/>-<sp/>is<sp/>here<sp/>for<sp/>the<sp/>FUTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.config.segment&lt;2&gt;(4)<sp/>=<sp/>Eigen::VectorXd::Ones(2);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value<sp/>=<sp/>m_in.value;<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.sensor_config<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;altitude&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>basically<sp/>measurements<sp/>from:<sp/>altimeter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.config(2)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.noise<sp/>=<sp/>m_in.noise;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_tolerance<sp/>=<sp/>m_in.outlier_tolerance;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.reject_counter<sp/>=<sp/>m_in.reject_counter;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.outlier_increase<sp/>=<sp/>m_in.outlier_increase;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.value.size()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vertical.value<sp/>=<sp/>m_in.value;<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_in.header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>||<sp/>m_in.header.frame_id<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>When<sp/>we<sp/>want<sp/>to<sp/>initialize<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>m_horizontal.noise<sp/>&lt;&lt;<sp/>m_in.noise.segment&lt;2&gt;(0),<sp/>m_in.noise.segment&lt;2&gt;(3),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>m_in.noise.segment&lt;2&gt;(12);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertical.noise<sp/>&lt;&lt;<sp/>m_in.noise(2),<sp/>m_in.noise(5),<sp/>m_in.noise(14);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rotation.noise<sp/>&lt;&lt;<sp/>m_in.noise.segment&lt;6&gt;(6);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_in.value.size()<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal.value<sp/>&lt;&lt;<sp/>m_in.value.segment&lt;2&gt;(0),<sp/>m_in.value.segment&lt;2&gt;(3),</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_in.value.segment&lt;2&gt;(12);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vertical.value<sp/>&lt;&lt;<sp/>m_in.value(2),<sp/>m_in.value(5),<sp/>m_in.value(14);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotation.value<sp/>&lt;&lt;<sp/>m_in.value.segment&lt;6&gt;(6);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@.@<sp/>Main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>ROS<sp/>set-ups:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;filters_node&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>node<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>create<sp/>a<sp/>node<sp/>handle;<sp/>need<sp/>to<sp/>pass<sp/>this<sp/>to<sp/>the<sp/>class<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>nh,<sp/>nh_private(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;main:<sp/>instantiating<sp/>an<sp/>object<sp/>of<sp/>type<sp/>FiltersNode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>instantiate<sp/>an<sp/>FiltersNode<sp/>class<sp/>object<sp/>and<sp/>pass<sp/>in<sp/>pointer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nodehandle<sp/>for<sp/>constructor<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="classFiltersNode" kindref="compound">FiltersNode</ref><sp/>filters(&amp;nh,<sp/>&amp;nh_private);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+.+<sp/>Dead<sp/>reckoning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classDeadReckoning" kindref="compound">DeadReckoning</ref><sp/>dr(&amp;nh,<sp/>&amp;nh_private);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Added<sp/>to<sp/>work<sp/>with<sp/>timer<sp/>-&gt;<sp/>going<sp/>into<sp/>spin;<sp/>let<sp/>the<sp/>callbacks<sp/>do<sp/>all<sp/>the<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>ros::spin();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ros/FiltersNode.cpp"/>
  </compounddef>
</doxygen>
