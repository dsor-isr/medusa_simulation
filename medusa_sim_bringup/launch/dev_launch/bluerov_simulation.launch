<?xml version="1.0"?>
<launch>

    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}]: ${node}: ${message}"/>

    <!-- Parameters and Arguments -->
    <arg name="name"            />                                  <!-- Name of the vehicle being launched -->   
    <arg name="config_package_path"  />                             <!-- Name of the package where the configuration files are stored -->
    <arg name="folder"                 default="simulation" />      <!-- Name of the folder for the configuration files --> 
    <arg name="vehicle_configuration"  default="bluerov_heavy" />   <!-- 6 or 8 thruster configuration (supports: 'regular' and 'heavy') -->
    <arg name="namespace"              default="false" />

    <!-- Parameters to choose which nodes to launch -->
    <arg name="console_server"                default="false" />  
    <arg name="console_path_parser"           default="false" />
    <arg name="filter"                        default="false" />
    <arg name="gnss2utm"                      default="false" />
    <arg name="static_thruster_allocation"    default="false" />
    <arg name="inner_loops_pid"               default="false" />
    <arg name="waypoint"                      default="false" />
    <arg name="path_following"                default="false" />
    <arg name="dsor_paths"                    default="false" />
    <arg name="auvstate2mstate"               default="false" />

    <!--Robot Spawn Location (in ENU inertial frame with orientation of ENU body frame) -->
	<arg name="x"           default="0.0"/>
	<arg name="y"           default="0.0"/>
	<arg name="z"           default="0.0"/>
	<arg name="roll"        default="0.0"/>
	<arg name="pitch"       default="0.0"/>
	<arg name="yaw"         default="0.0"/>
    
    <!-- Launch a Vehicle in gazebo simulation -->
    <arg name="dollar" value="$" />
    <arg name="vehicle_package"       value="$(arg vehicle_configuration)" />
    <arg name="vehicle_package_path"  value="(find $(arg vehicle_package)" />
    <include file="$(arg dollar)$(arg vehicle_package_path))/launch/upload.launch">
        <arg name="x"           value="$(arg x)"/>
        <arg name="y"           value="$(arg y)"/>
        <arg name="z"           value="$(arg z)"/>
        <arg name="roll"        value="$(arg roll)"/>
        <arg name="pitch"       value="$(arg pitch)"/>
        <arg name="yaw"         value="$(arg yaw)"/>
    </include>

    <!-- Vehicle Specific Config File -->
    <rosparam command="load" file="$(arg dollar)$(arg config_package_path))/config/$(arg folder)/$(arg vehicle_configuration)/addons.yaml" />
    <rosparam command="load" file="$(arg dollar)$(arg config_package_path))/config/$(arg folder)/$(arg vehicle_configuration)/control.yaml" />
    <rosparam command="load" file="$(arg dollar)$(arg config_package_path))/config/$(arg folder)/$(arg vehicle_configuration)/nav.yaml" />

    <!-- Medusa console interface -->
    <group if="$(arg console_server)">
        <node pkg="http_server" type="console.py" name="console_server" args="console" output="screen">
            <param name="type_Folder" value="$(find http_server)/../../types_FOLDER" />
            <param name="pages_folder"   value="$(find http_server)/pages/" />
        </node>
    </group>

    <group if="$(arg console_path_parser)">
        <node pkg="console_path_parser" type="console_path_parser_node" name="console_path_parser" respawn="false" output="screen">
            <param name="path_folder" value="$(env ROS_BAG_FOLDER)/paths_from_console"/>
            <remap from="ID" to="ID_Comms"/>
        </node>
    </group>

    <!-- Medusa Navigation Filter -->
    <group if="$(arg filter)">
        <node pkg="sensor_fusion" type="sensor_fusion" name="filter" respawn="false" output="screen" />
    </group>

    <group if="$(arg gnss2utm)">
        <node pkg="nav_tools" type="gnss_to_utm" name="gnss2utm" respawn="false" output="screen" />
    </group>

    <!-- Medusa low-level control -->
    <group if="$(arg static_thruster_allocation)">
        <node pkg="static_thruster_allocation" type="static_thruster_allocation" name="static_thruster_allocation" output="screen" />
    </group>

    <group if="$(arg inner_loops_pid)">
        <node pkg="inner_loops_pid" type="inner_loops_pid" name="inner_loops_pid" output="screen" />
    </group>

    <!-- Medusa high-level control -->
    <group if="$(arg waypoint)">
        <node pkg="waypoint" type="waypoint_node" name="waypoint" output="screen" />
    </group>

    <group if="$(arg path_following)">
        <node pkg="path_following" type="path_following_node" name="path_following" output="screen" />
    </group>

    <group if="$(arg dsor_paths)">
        <node pkg="dsor_paths" type="dsor_paths_node" name="dsor_paths" output="screen" />
    </group>

    <!-- nav_tools: convert auv_msgs::NavigationStatus state to medusa_msgs::mState -->
    <group if="$(arg auvstate2mstate)">
        <node pkg="nav_tools" type="auvstate_to_mstate" name="auvstate2mstate" respawn="true" output="screen" />
    </group>
</launch>